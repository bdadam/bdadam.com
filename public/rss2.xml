<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Devblog of Adam Beres-Deak]]></title><description><![CDATA[Devblog]]></description><link>https://bdadam.com/</link><generator>RSS for Node</generator><lastBuildDate>Sat, 02 May 2020 08:51:46 GMT</lastBuildDate><atom:link href="https://bdadam.com/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[How and why to generate a universally unique identifier with JavaScript]]></title><description><![CDATA[<p>In any form of software development we often need a “name” to identify pieces of information (objects in memory, database entities, DOM elements, cars, persons and so on). This article will show how to generate such identifiers based on the needs, from simplest to more complex solutions.</p>

<h2 id="the-simplest-solution">The simplest solution</h2>
<p>In many client side application for this task we can use a simple solution: a <code>function</code> which returns an incrementing number every time it’s called. This can be sufficient for some client side apps where we don’t store the id in any database (e.g. we use the id to generate DOM elements or some short-living objects).</p>
<pre><code class="language-js">let nextId = 0;
function generateId() {
  return nextId++;
}
</code></pre>
<h2 id="what-is-a-universally-unique-identifier%3F">What is a universally unique identifier?</h2>
<p>The above solution is not sufficient when we need uniqueness. The above program generates the same ids every time it gets restarted.</p>
<p>To solve this problem smart computer scientists introduced the concept of a <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noopener">universally unique id (UUID)</a> or also called a globally unique identifier (GUID).</p>
<p>The chance to generate the same id twice is incredibly small for most practical use-cases. (There are no collisions.)</p>
<p>Let’s see how we can generate such ids.</p>
<h2 id="generic-client-side-solution">Generic client side solution</h2>
<pre><code class="language-js">function uuidv4() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    var r = (Math.random() * 16) | 0,
      v = c == 'x' ? r : (r &amp; 0x3) | 0x8;
    return v.toString(16);
  });
}
</code></pre>
<h2 id="better-random-generator">Better random generator</h2>
<p>The above solution is sufficient for many use cases. However we have to note that <code>Math.random</code> is not considered a good source of randomness due to how it is implemented in most browsers. What this means is that the chance for uuid collision is significantly higher than it is when using a proper source of randomness.</p>
<p>For this to overcome we need to choose a better pseudo random number generator (PRNG). Luckily most browsers nowadays support <code>crypto.getRandomValues</code>.</p>
<blockquote>
<p>The <code>crypto.getRandomValues()</code> method lets you get cryptographically strong random values. – <a href="https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues" target="_blank" rel="noopener">MDN</a></p>
</blockquote>
<pre><code class="language-js">function uuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =&gt;
    (
      c ^
      (crypto.getRandomValues(new Uint8Array(1))[0] &amp; (15 &gt;&gt; (c / 4)))
    ).toString(16)
  );
}
</code></pre>
<h2 id="server-side-solution">Server side solution</h2>
<p>The code from the previous step has only one problem: it only works in browsers but not in Node.js.</p>
<p>But as always there is a package for the rescue: <a href="https://www.npmjs.com/package/uuid" target="_blank" rel="noopener">uuid</a>.</p>
<p>This package has the advantage compared to the browser variants that it suports version 1, 3, 4, 5 UUIDs as well. That is why we have <code>x</code>, <code>y</code> and <code>4</code> in <code>xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx</code> which is used in the code of the client side function.</p>
<pre><code class="language-bash">yarn add uuid

# or

npm install --save uuid
</code></pre>
<p>Then in code we can use the module like this:</p>
<pre><code class="language-js">const uuidv1 = require('uuid/v1');
uuidv1(); // ⇨ '2c5ea4c0-4067-11e9-8bad-9b1deb4d3b7d'
</code></pre>
<h2 id="differences-between-uuid-versions">Differences between UUID versions</h2>
<p>The eagle-eyed reader may have spotted that we always generated version 4 UUID in the client-side code examples. The reason behind this is that v4 UUIDs only rely on a source of randomness. Other UUID versions also include some other information in the generated UUIDs to further reduce the chance of a collision.</p>
<p>A version 1 based id includes the timestamp when the id was generated and also the MAC address of the machine which was used to generate the id.</p>
<p>Version 3 and 5 based ids include the hashes of a namespace (v3 uses MD5 and v5 uses SHA-1).</p>
<p>Version 4 UUIDs include 122 randomly generated bits and 6 predetermined bits to signal the version.</p>
<h2 id="validating-uuids">Validating UUIDs</h2>
<pre><code class="language-js">function isValidUUID(uuid) {
  const re = /[0-9a-f]{8}\-[0-9a-f]{4}\-[0-9a-f]{4}\-[0-9a-f]{4}\-[0-9a-f]{12}/i;
  return re.test(uuid);
}

isValidUUID('a12f444c-2c6a-4d24-a907-885ac6108493'); // ⇨ true
isValidUUID('abc'); // ⇨ false
</code></pre>
<h2 id="read-more">Read more</h2>
<p><a href="https://v8.dev/blog/math-random" target="_blank" rel="noopener">There’s Math.random(), and then there’s Math.random()</a></p>
<h2 id="credits">Credits</h2>
<ul>
<li>The code examples in this article were borrowed form this <a href="https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript" target="_blank" rel="noopener">Stack Overflow question</a></li>
<li>The regex for validation UUIDs was taken from <a href="https://www.regextester.com/99148" target="_blank" rel="noopener">regextester.com</a></li>
</ul>
]]></description><link>https://bdadam.com/blog/how-to-create-uuid-with-javascript.html</link><guid isPermaLink="true">https://bdadam.com/blog/how-to-create-uuid-with-javascript.html</guid><pubDate>Mon, 30 Sep 2019 00:00:00 GMT</pubDate></item><item><title><![CDATA[Displaying icons with custom elements]]></title><description><![CDATA[<p>I created a technique for using SVG icons without pain with a simple gulp task. Since HTTP/2 is not widely supported yet, it has always been a pain to use icons on web pages. There are many ways to include icons and all of them have some tradeoffs. This interesting technique shows a way to include SVG-icons in a cross-browser way with using custom elements.</p>

<h2 id="tldr">TLDR</h2>
<p>The code can be found here: <a href="https://github.com/bdadam/custom-icons" target="_blank" rel="noopener">bdadam/custom-icons</a>.</p>
<p>The usage looks like this:</p>
<pre><code class="language-html">&lt;x-icon type=&quot;some-icon&quot;&gt;&lt;/x-icon&gt;
...
&lt;script src=&quot;icons.js&quot; async&gt;&lt;/script&gt;
</code></pre>
<p>The script basically puts an svg element inside the <code>x-icon</code> tag. This svg element can then - for example - be styled with CSS.</p>
<pre><code class="language-html">&lt;style&gt;
  [type='happy'] path {
    fill: red;
  }
&lt;/style&gt;
...
&lt;x-icon type=&quot;happy&quot;&gt;
  &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 32 32&quot;&gt;
    &lt;path fill=&quot;#444&quot; d=&quot;...&quot;&gt;&lt;/path&gt;
  &lt;/svg&gt;
&lt;/x-icon&gt;
</code></pre>
<h2 id="the-longer-version">The longer version</h2>
<p>I have to admit that I always had a pain when I had to include a set of icons on webpages.</p>
<ul>
<li>I didn’t want to use icon fonts, because they are sometimes problematic:
<a href="https://github.com/FortAwesome/Font-Awesome/issues/6133" target="_blank" rel="noopener">accessibility problems</a>, <a href="http://mir.aculo.us/2014/10/31/icon-fonts-vs-inline-svg/" target="_blank" rel="noopener">blurrines</a>, etc.</li>
<li>I didn’t want to use inline SVGs either, because of cacheability and duplication.</li>
<li>I didn’t want to include a bunch of IMG tags, because of the many extra HTTP-requests.</li>
</ul>
<p>So I was searching for a better way when I found out that I could have all the advantages of those techniques above.
I always thought it would be pretty neat if we had some dedicated HTML element for icons. Like this here:</p>
<pre><code class="language-html">&lt;x-icon type=&quot;some-icon&quot;&gt;&lt;/x-icon&gt;
</code></pre>
<p>This looks quite semantic and self explaining.
We could use any tag name which is a valid name for custom elements - e.g. it must include a dash.
There is a type attribute which defines which icon is shown. Easy. Bot how to achieve this?</p>
<h2 id="javascript-and-webpack-for-the-rescue">JavaScript and webpack for the rescue</h2>
<p>The technique is behind the scenes quite simple.
The input is just some SVG files.
The output is a single JavaScript file which includes the content of all the SVG files and some loader code.</p>
<p>For the source code of a sample implementation please check out this GitHub repository: <a href="https://github.com/bdadam/custom-icons" target="_blank" rel="noopener">bdadam/custom-icons</a></p>
<p>The only magic what we need is WebPack with a custom loader: <a href="https://github.com/rpominov/svgo-loader" target="_blank" rel="noopener">svgo-loader</a>.
This loader automagically loads the content of the <code>require</code>d SVG files, minimizes it and provides it as normal string variable in the code.</p>
<p>It’s hard to explain, please check out the sources.</p>
<h3 id="supported-browsers">Supported browsers</h3>
<p>This technique works in all modern browsers.
Though <code>document.registerElement</code> is only supported in recent versions of Chrome, we can already use this API now
with a very smart <a href="https://github.com/WebReflection/document-register-element" target="_blank" rel="noopener">polyfill from WebReflection</a>.
Thanks to the polyfill we have support back to IE9 and Android 2.2.</p>
<p>Browsers without native SVG support are unfortunately out for now. Maybe in the future if somebody still needs this, one can create a fallback JavaScript
file with PNGs.</p>
]]></description><link>https://bdadam.com/blog/displaying-icons-with-custom-elements.html</link><guid isPermaLink="true">https://bdadam.com/blog/displaying-icons-with-custom-elements.html</guid><pubDate>Wed, 14 Oct 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Plain JavaScript event delegation]]></title><description><![CDATA[<p>Event delegation is a powerful concept of event handling. If you are using jQuery, you might know it as jQuery.on(). Since I don’t use jQuery anymore, I had to write a similar function myself. If you are wondering how the code looks please read on.</p>

<h2 id="what-is-event-delegation%3F">What is event delegation?</h2>
<p>With event delegation we only set one event handler function, which then analyzes the event’s target element and executes the intended handler function.
This way we have better code readability and performance improves.
There is no need to set new event handlers when the content dynamically changes.
This is very handy for lists or tables.</p>
<p>In jQuery code we could just call</p>
<pre><code class="language-js">jQuery('#list').on('click', '.item', eventHandler);
</code></pre>
<p>Example: there is a list with 100 items. We want our eventHandler function to be called whenever a list item is clicked.</p>
<pre><code class="language-html">&lt;ul id=&quot;list&quot;&gt;
  &lt;li&gt;1&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
  &lt;li&gt;...&lt;/li&gt;
  &lt;li&gt;100&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
  var list = document.getElementById('list');
  list.addEventListener('click', function eventHandler(event) {
    // one item in the list was clicked
    console.log(event.target); // this is that item
    event.target.style.backgroundColor = '#f00';
  });
&lt;/script&gt;
</code></pre>
<h2 id="this-is-just-event-bubbling%2C-isn%E2%80%99t-it%3F">This is just event bubbling, isn’t it?</h2>
<p>This first example was not very spectacular. It just uses event bubbling, which is natural in JavaScript.</p>
<p>But we can go further. What if only some specific elements should trigger our <code>eventHandler</code> function?
This is also possible. With jQuery the code looks like this:</p>
<pre><code class="language-html">&lt;ul id=&quot;list&quot;&gt;
  &lt;li class=&quot;yes&quot;&gt;1&lt;/li&gt;
  &lt;li class=&quot;no&quot;&gt;2&lt;/li&gt;
  &lt;li class=&quot;no&quot;&gt;3&lt;/li&gt;
  &lt;li&gt;...&lt;/li&gt;
  &lt;li class=&quot;yes&quot;&gt;100&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
  $('#list').on('click', '.yes', function eventHandler(e) {
    // this function is only called,
    // when a list item with 'yes' class is called
    console.log(e.target); // this is the clicked list item
  });
&lt;/script&gt;
</code></pre>
<h2 id="what-if-i-don%E2%80%99t-have-jquery%3F">What if I don’t have jQuery?</h2>
<p>That’s absolutely fine. I don’t use jQuery either anymore. Here we have some vanilla JavaScript code:</p>
<pre><code class="language-html">&lt;ul id=&quot;list&quot;&gt;
  &lt;li class=&quot;yes&quot;&gt;1&lt;/li&gt;
  &lt;li class=&quot;no&quot;&gt;2&lt;/li&gt;
  &lt;li class=&quot;no&quot;&gt;3&lt;/li&gt;
  &lt;li&gt;...&lt;/li&gt;
  &lt;li class=&quot;yes&quot;&gt;100&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
  function on(elSelector, eventName, selector, fn) {
    var element = document.querySelector(elSelector);

    element.addEventListener(eventName, function (event) {
      var possibleTargets = element.querySelectorAll(selector);
      var target = event.target;

      for (var i = 0, l = possibleTargets.length; i &lt; l; i++) {
        var el = target;
        var p = possibleTargets[i];

        while (el &amp;&amp; el !== element) {
          if (el === p) {
            return fn.call(p, event);
          }

          el = el.parentNode;
        }
      }
    });
  }

  on('#list', 'click', '.yes', function (e) {
    // this function is only called, when a list item with 'yes' class is called
    console.log(e.target); // this is the clicked list item
  });
&lt;/script&gt;
</code></pre>
<h2 id="demo">Demo</h2>
<p>Click on any list item. Where it says “click me!”, the click will trigger an <code>alert()</code> message.</p>
<iframe src="/demo/event-delegation.html" style="width: 100%; height: 100px;" frameborder="0"></iframe>
<pre class="language-html" style="margin: 0!important; max-height: 100%;"><code class="language-html">&#60;ul id="list" class="button-list"&#62;
    &#60;li class="yes"&#62;
        &#60;button&#62;click me!&#60;/button&#62;
    &#60;/li&#62;
    &#60;li class="no"&#62;
        &#60;button&#62;won't work&#60;/button&#62;
    &#60;/li&#62;
    &#60;li class="no"&#62;
        &#60;button&#62;won't work&#60;/button&#62;
    &#60;/li&#62;
    &#60;li class="yes"&#62;
        &#60;button&#62;click me!&#60;/button&#62;
    &#60;/li&#62;
    &#60;li class="no"&#62;
        &#60;button&#62;won't work&#60;/button&#62;
    &#60;/li&#62;
    &#60;li class="yes"&#62;
        &#60;button&#62;click me!&#60;/button&#62;
    &#60;/li&#62;
&#60;/ul&#62;
&#60;script&#62;
    (function () {
        function on(elSelector, eventName, selector, fn) {
            var element = document.querySelector(elSelector);

            element.addEventListener(eventName, function (event) {
                var possibleTargets = element.querySelectorAll(selector);
                var target = event.target;

                for (var i = 0, l = possibleTargets.length; i &#60; l; i++) {
                    var el = target;
                    var p = possibleTargets[i];

                    while (el &#38;&#38; el !== element) {
                        if (el === p) {
                            return fn.call(p, event);
                        }

                        el = el.parentNode;
                    }
                }
            });
        }

        on('#list', 'click', 'li.yes', function () {
            alert('You clicked me!');
        });
    })();
&#60;/script&#62;
&#60;style&#62;
    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
        color: #111;
        padding: 0;
        margin: 0;
    }

    .button-list {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        justify-content: space-around;
        align-items: center;
        height: 100%;
    }
&#60;/style&#62;</code></pre>
<h2 id="use-cases">Use-cases</h2>
<ol>
<li>Large tables with many fields</li>
<li>Lists - the content of the parent element can be changed freely (paging), the event listener must be set only once</li>
<li>etc.</li>
</ol>
<h2 id="browser-support">Browser Support</h2>
<p>This code uses two core DOM API call <code>Element.addEventListener</code> and <code>Element.querySelectorAll</code>. These are supported in every modern browser and IE9+.</p>
<h3 id="more-resources-on-events">More resources on events</h3>
<ul>
<li><a href="https://javascript.info/tutorial/bubbling-and-capturing" target="_blank" rel="noopener">Bubbling and Capturing @ javascript.info</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener" target="_blank" rel="noopener">addEventListener @ MDN</a></li>
<li><a href="https://www.quirksmode.org/js/events_order.html" target="_blank" rel="noopener">Event Order @ QuirksMode</a></li>
<li><a href="https://www.quirksmode.org/js/events_advanced.html" target="_blank" rel="noopener">Events Advanced @ QuirksMode</a></li>
</ul>
<p><strong>What do you think, would you use this code in your projects? Tell me your thoughts in the comments.</strong></p>
]]></description><link>https://bdadam.com/blog/plain-javascript-event-delegation.html</link><guid isPermaLink="true">https://bdadam.com/blog/plain-javascript-event-delegation.html</guid><pubDate>Mon, 26 Jan 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[After the first year of blogging - what happened on my blog in 2014?]]></title><description><![CDATA[<p>I wish you all a happy new year and much fun and success for 2015! Let’s have a quick review of the past 365 days.</p>

<p><figure><a href="/article-assets/2015.jpg"><img src="/article-assets/2015.jpg" alt="Happy New Year"></a><figcaption>Happy New Year</figcaption></figure></p>
<h2 id="in-2014-amongst-other-things-i-%E2%80%A6">In 2014 amongst other things I …</h2>
<ul>
<li>published 34 articles</li>
<li>researched better webfont loading
<a href="/blog/loading-webfonts-with-high-performance/">1</a>,
<a href="/blog/better-webfont-loading-with-localstorage-and-woff2/">2</a></li>
<li>learned static site generation with node.js tools
<a href="/blog/static-site-generation-boilerplate/">1</a>,
<a href="/blog/why-i-chose-a-statically-generated-website/">2</a>,
<a href="/blog/serve-a-practical-command-line-webserver/">3</a>,
<a href="/blog/hosting-static-web-pages-and-assets-with-google-drive/">4</a></li>
<li>began using <a href="http://Instantclick.io" target="_blank" rel="noopener">Instantclick.io</a> for providing better percieved performance
<a href="/blog/optimistic-page-loading-with-instantclick-io/">1</a></li>
<li>pimped up the good old textarea
<a href="/blog/adding-tab-support-to-textareas/">1</a>,
<a href="/blog/automatically-adapting-the-height-textarea/">2</a></li>
<li>wrote about some JavaScript thingies
<a href="/blog/a-simple-pubsub-module-in-javascript/">1</a>,
<a href="/blog/fat-arrows-for-javascript/">2</a>,
<a href="/blog/error-handling-in-javascript/">3</a>,
<a href="/blog/demistifying-angularjs-dependency-injection/">4</a>,
<a href="/blog/defining-properties-in-javascript/">5</a>,
<a href="/blog/finally-always-wins-unless-you-crash-your-computer-meanwhile/">6</a>,
<a href="/blog/one-more-reason-to-check-for-strict-equality-in-javascript/">7</a>,
<a href="/blog/generating-sound-effects-with-client-side-javascript/">8</a></li>
<li>discovered a simple usability improvement for Google Maps <a href="/blog/simple-usability-trick-for-google-maps/">1</a></li>
</ul>
<h2 id="top-10-most-popular-posts">Top 10 most popular posts</h2>
<ol>
<li><a href="/blog/loading-webfonts-with-high-performance/">Loading webfonts with high performance on responsive websites</a></li>
<li><a href="/blog/better-webfont-loading-with-localstorage-and-woff2/">Better webfont loading with using localStorage and providing WOFF2 support</a></li>
<li><a href="/blog/simple-usability-trick-for-google-maps/">A simple usability trick for Google Maps</a></li>
<li><a href="/blog/demistifying-angularjs-dependency-injection/">Demystifying AngularJS’ dependency injection</a></li>
<li><a href="/blog/panning-and-scrolling-background-images-using-the-canvas-element/">Panning and scrolling background images using the canvas element</a></li>
<li><a href="/blog/video-douglas-crockford-about-the-new-good-parts/">Worth watching: Douglas Crockford speaking about the new good parts of JavaScript in 2014</a></li>
<li><a href="/blog/building-desktop-apps-with-node-js-and-web-technologies/">Building desktop apps with node.js and web technologies</a></li>
<li><a href="/blog/finding-a-random-document-in-mongodb/">Finding a random document in MongoDB (with benchmarks)</a></li>
<li><a href="/blog/optimistic-page-loading-with-instantclick-io/">Loading web pages really fast - optimistic page loading with Instantclick.io</a></li>
<li><a href="/blog/automatically-loading-grunt-tasks-with-matchdep/">Automatically loading Grunt tasks with matchdep</a></li>
</ol>
<h2 id="what-i-learned-from-blogging-in-2014%3F">What I learned from blogging in 2014?</h2>
<ul>
<li>Blogging is fun</li>
<li>No matter how much I understand the topic I’m writing about, it still takes a lot of time and effort to publish a post</li>
<li>A few times I really used my blog to gather information about things I would have forgotten otherwise</li>
<li>I want to go on and publish betters posts and more often</li>
</ul>
<h2 id="resources%3A">Resources:</h2>
<p>Happy new year photo: <a href="https://commons.wikimedia.org/wiki/Category:2015#mediaviewer/File:Happy_New_Year_2015.png" target="_blank" rel="noopener">Wikimedia Commons</a></p>
]]></description><link>https://bdadam.com/blog/first-year-of-blogging.html</link><guid isPermaLink="true">https://bdadam.com/blog/first-year-of-blogging.html</guid><pubDate>Thu, 01 Jan 2015 16:00:00 GMT</pubDate></item><item><title><![CDATA[Better webfont loading with using localStorage and providing WOFF2 support]]></title><description><![CDATA[<p>In my previous <a href="/blog/loading-webfonts-with-high-performance/">article about webfont loading</a> I showed a technique about how to load webfonts without blocking page rendering and without annoying the users with flickering text on all pageloads. This time I show you an optimized version of the script and provide a solution for WOFF2 support for the newest browsers.</p>

<h2 id="expectations">Expectations</h2>
<ol>
<li>The users must see the text as soon as possible.</li>
<li>As longs as the font is loading, the text must be rendered with the fallback font so that users can see and read it.</li>
<li>Users shouldn’t be annoyed with flickering text on each page load.</li>
<li>Modern browsers with WOFF2 support should receive the fonts in WOFF2 format. This means ca. 30% less filesize.</li>
</ol>
<h2 id="how-to-do-this%3F">How to do this?</h2>
<ul>
<li>
<p>Loading fonts as CSS asynchronously solves expectaions 1 and 2. But unfortunately it causes flickering on every pageload.
The browsers already have rendered the text in the fallback font when they finish loading the webfont. So they replace the texts and this causes some flashing.</p>
</li>
<li>
<p>The idea is to only load a font from the server once. Then we store the data into the localStorage.
On subsequent requests we load the font directly from <code>localStorage</code>. This eliminates the flashing on subsequent page loads.
Only the first load is affected by the flashing. So no. 3 is also solved now.</p>
</li>
<li>
<p>It is quite hard to detect WOFF2 support in the browser if we don’t want to rely on user agent detection.
The best I could find is a very <a href="https://github.com/filamentgroup/woff2-feature-test" target="_blank" rel="noopener">clever script</a> from Filament Group which uses the font loading API.
It’s not 100% correct, but it doesn’t provide false positives, only false negatives which is really acceptable in this case.</p>
</li>
</ul>
<h2 id="overview-of-the-script">Overview of the script</h2>
<ol>
<li>We let the old browsers stop early. Testing for <code>window.addEventListener</code> or some knows user agents (older Android stock browser, Opera Mini, etc.) is good enough.</li>
<li>In some cases <code>localStorage</code> can be unreachable, although the browser supports WOFF fonts. For theses cases I provide some fallback.</li>
<li>Then we check whether the font is already stored in localStorage. If it is, we load it immediately.</li>
<li>If it hasn’t been loaded before, we load it with an AJAX call. But first we check for WOFF2 support.</li>
<li>Then we store the data into <code>localStorage</code> and load the css text into a style element.</li>
</ol>
<h2 id="lets-take-a-look-at-the-script">Lets take a look at the script</h2>
<pre><code class="language-js">//This script must be placed in the HEAD above all external stylesheet declarations (link[rel=stylesheet])
function loadFont(fontName, woffUrl, woff2Url) {
  // 0. Many unsupported browsers should stop here
  var nua = navigator.userAgent;
  var noSupport =
    !window.addEventListener || // IE8 and below
    (nua.match(/(Android (2|3|4.0|4.1|4.2|4.3))|(Opera (Mini|Mobi))/) &amp;&amp;
      !nua.match(/Chrome/)); // Android Stock Browser below 4.4 and Opera Mini

  if (noSupport) {
    return;
  }

  // 1. Setting up localStorage
  var loSto = {};
  try {
    // We set up a proxy variable to help with localStorage, e.g. when cookies are disabled
    // and the browser prevents us accessing it.
    // Otherwise some exceptions can be thrown which completely prevent font loading.
    loSto = localStorage || {};
  } catch (ex) {}

  var localStoragePrefix = 'x-font-' + fontName;
  var localStorageUrlKey = localStoragePrefix + 'url';
  var localStorageCssKey = localStoragePrefix + 'css';
  var storedFontUrl = loSto[localStorageUrlKey];
  var storedFontCss = loSto[localStorageCssKey];

  // 2. Setting up the &lt;style&gt; element, that we are using to apply the base64 encoded font data
  var styleElement = document.createElement('style');
  styleElement.rel = 'stylesheet';
  document.head.appendChild(styleElement);
  // Setting styleElement.textContent must be after this line, because of IE9 errors

  // 3. Checking whether the font data is already in localStorage and up-to-date
  if (
    storedFontCss &amp;&amp;
    (storedFontUrl === woffUrl || storedFontUrl === woff2Url)
  ) {
    // the css is still in the localStorage
    // AND it was loaded from one of the current URLs

    // 4. Applying the font style sheet
    styleElement.textContent = storedFontCss;
  } else {
    // The data was not present, or loaded from an obsolete URL
    // So we have to load it again

    // 5. Checking for WOFF2 support to know which URL we should use
    var url =
      woff2Url &amp;&amp; supportsWoff2()
        ? woff2Url // WOFF2 URL provided and supported
        : woffUrl; // only WOFF support

    // 6. Fetching the font data from the server
    var request = new XMLHttpRequest();
    request.open('GET', url);
    request.onload = function() {
      if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {
        // 7. Updating localStorage with the fresh data and applying the font data
        loSto[localStorageUrlKey] = url;
        loSto[localStorageCssKey] = styleElement.textContent =
          request.responseText;
      }
    };
    request.send();
  }

  function supportsWoff2() {
    // Source: https://github.com/filamentgroup/woff2-feature-test
    if (!window.FontFace) {
      return false;
    }

    var f = new FontFace(
      't',
      'url(&quot;data:application/font-woff2,&quot;) format(&quot;woff2&quot;)',
      {}
    );
    f.load();

    return f.status === 'loading';
  }
}
</code></pre>
<p>The full script and some Grunt tasks for minification are available on <a href="https://github.com/bdadam/OptimizedWebfontLoading" target="_blank" rel="noopener">Github/bdadam/OptimizedWebfontLoading</a>.
There are also some demo files.</p>
<h2 id="where-to-put-the-script%3F">Where to put the script?</h2>
<p>The script has to be in the HEAD of your page above all stylesheet declarations (<code>link[rel=stylesheet]</code>)
so that it doesn’t block page rendering (the browser doesn’t have to wait for the CSSOM to be ready).</p>
<h2 id="what-happens-when-localstorage-is-not-available%3F">What happens when <code>localStorage</code> is not available?</h2>
<p>This mostly happens when cookies are disabled or the website is loaded inside a WebView container in a native app.
In this case the code still works and falls back to normal browser caching.
The CSS file is requested on each pageload, but served from the browser cache - as long as the CSS file is served with proper caching headers.</p>
<h2 id="fallback-font">Fallback font</h2>
<p>I thinkt it is enough to only provide webfonts for those browsers which support the WOFF or WOFF2 format.
This means ca. 90% of the users world wide. Other browsers should get the text rendered in a fallback font.</p>
<p>The users with these older browsers are going to be thankful, because we don’t waste their limited resources (CPU, memory) on some fancy stuff.</p>
<h2 id="demo">Demo</h2>
<p>Although the technique shown in this article is at the moment my preferred way of loading webfonts, for comparision I provide two more techniques.</p>
<ol>
<li><a href="/samples/webfonts2/localStorage.html">Loading webfonts as CSS (async), then storing into <code>localStorage</code> for subsequent pageloads requests</a></li>
<li><a href="/samples/webfonts2/asynccss.html">Loading webfonts as CSS (async), but not using localStorage</a></li>
<li><a href="/samples/webfonts2/external-fonts.html">Loading webfonts from external woff and woff2 files</a></li>
</ol>
<h2 id="comparision">Comparision</h2>
<p>I ran some tests on <a href="https://webpagetest.org/" target="_blank" rel="noopener">webpagetest.org</a> with 3G connection.</p>
<p>The first visit was basically the same for both the localStorage and the async CSS solution.
They both first rendered the text in the fallback font, and then switched over to the webfont. Causing blinking once.
Loading the fonts from external files lead to invisible text until the fonts were loaded. This deleayed rendering with 0.6 seconds.</p>
<p>No. 1 and 2 in the lead.</p>
<p>The second visit comparision also shows some differences between localStorage and async CSS.
We can clearly see, that loading from localStorage doesn’t cause any rerendering. Once the HTML is downloaded, the page is rendered immediately.</p>
<p>The async CSS way renders the page in the default font and then rerenders it with the webfont. This causes flickering for the user on every pageload.</p>
<p>No. 1 is the winner in this regard.</p>
<p>To illustrate the differences here are some filmstrip views:</p>
<p><figure><a href="/article-assets/webfonts2/filmstrip-localStorage.jpg"><img src="/article-assets/webfonts2/filmstrip-localStorage.jpg" alt="Comparision of different webfont loading techniques. The localStorage way. (repeat view)"></a><figcaption>Async CSS loading, using localStorage. No re-rendering.</figcaption></figure></p>
<p><figure><a href="/article-assets/webfonts2/filmstrip-async-css.jpg"><img src="/article-assets/webfonts2/filmstrip-async-css.jpg" alt="Comparision of different webfont loading techniques. The async loaded CSS way. (repeat view)"></a><figcaption>Async CSS loading, without localStorage. Re-rendering visible.</figcaption></figure></p>
<p><figure><a href="/article-assets/webfonts2/filmstrip-external-font.jpg"><img src="/article-assets/webfonts2/filmstrip-external-font.jpg" alt="Comparision of different webfont loading techniques. Externally loaded fonts. (repeat view)"></a><figcaption>Loading fonts externally. Rendering delayed until fonts are loaded.</figcaption></figure></p>
<h3 id="resources">Resources</h3>
<ul>
<li><a href="/blog/loading-webfonts-with-high-performance/">My prevoius article about webfont loading on responsive sites</a></li>
<li><a href="https://github.com/filamentgroup/woff2-feature-test" target="_blank" rel="noopener">Woff2 feature test by Filament Group</a></li>
<li><a href="https://caniuse.com/#feat=woff2" target="_blank" rel="noopener">WOFF2 support @ caniuse.com</a></li>
<li><a href="https://caniuse.com/#search=FontFace" target="_blank" rel="noopener">Font loading support @ caniuse.com</a></li>
<li><a href="https://www.igvita.com/2012/09/12/web-fonts-performance-making-pretty-fast/" target="_blank" rel="noopener">Web Fonts Performance: Making Pretty, Fast - By Ilya Grigorik</a></li>
<li><a href="https://www.smashingmagazine.com/2014/09/08/improving-smashing-magazine-performance-case-study/" target="_blank" rel="noopener">Improving Smashing Magazine’s Performance: A Case Study</a></li>
<li><a href="https://www.filamentgroup.com/lab/performance-rwd.html" target="_blank" rel="noopener">How we make RWD sites load fast as heck</a></li>
</ul>
<p>What do you think of this technique? Do you have some ideas to improve it? Please leave a comment.</p>
<h2 id="update">Update</h2>
<p>As @CrocoDillon recommended,
I added the third (optional) argument to<br>
<code>new FontFace(..., ..., {})</code> when checking for WOFF2 support.
Otherwise some browsers throw an exception (Chrome 35 and 36, Opera 22 and 23).
Take a closer look at the <a href="https://github.com/filamentgroup/woff2-feature-test/pull/3" target="_blank" rel="noopener">pull request</a>.</p>
]]></description><link>https://bdadam.com/blog/better-webfont-loading-with-localstorage-and-woff2.html</link><guid isPermaLink="true">https://bdadam.com/blog/better-webfont-loading-with-localstorage-and-woff2.html</guid><pubDate>Thu, 18 Dec 2014 00:30:00 GMT</pubDate></item><item><title><![CDATA[Worth watching: Douglas Crockford speaking about the new good parts of JavaScript in 2014]]></title><description><![CDATA[<p>At the Nordic.js 2014 Douglas Crockford was giving a talk about what he considers to be “the good parts” of JavaScript in 2014. He talks about ECMAScript6, what parts of it he could already identify as the new good parts, and of which he thinks, that they are going to be the new bad parts. Read on for my summary or just whatch the video.</p>

<p><a href="https://www.youtube.com/embed/PSGEjv3Tqo0" target="_blank" rel="noopener">https://www.youtube.com/embed/PSGEjv3Tqo0</a></p>
<h2 id="the-%E2%80%9Cgood-parts%E2%80%9D-he-identified-in-es6">The “good parts” he identified in ES6</h2>
<ul>
<li>ES6’s new (proper) <a href="http://duartes.org/gustavo/blog/post/tail-calls-optimization-es6/" target="_blank" rel="noopener">tail call optimization</a>.
So that “JavaScript becomes a real functional programming language”.</li>
<li>Ellipsis aka rest operator for variable number of function arguments.<br>
<code>function x(...params) {}</code></li>
<li>Modules - to come away from global variables</li>
<li>The <code>let</code> statement for block scope variables -&gt; &quot;<code>let</code> is the new <code>var</code>&quot;</li>
<li>Destructoring <code>let {a, b} = obj</code> equals in ES5 <code>var a = obj.a, b = obj.b;</code></li>
<li><code>WeakMap</code> which has a terrible name -&gt; nobody wants to use something which is weak, everybody wants strong things</li>
</ul>
<h2 id="the-bad-parts">The bad parts</h2>
<p>He admits that all the ES6 things are new and it’s hard to decide whether they are going to be good or bad.
But there are definitely things, where he feels they are going to be bad.</p>
<ul>
<li>
<p>The worst is <code>class</code>. It’s only for Java programmers, who don’t want to learn JavaScript. For those “Who don’t know how miserable they are.”</p>
</li>
<li>
<p>Generators - which add much complexity but little value</p>
</li>
<li>
<p>He also talks about that he changed his mind. There are things, which he considered to be good parts, but they aren’t anymore.</p>
</li>
<li>
<p>He stopped using the <code>new</code> keyword years ago. He uses <code>Object.create</code> instead.</p>
</li>
<li>
<p>But he also stopped using <code>Object.create</code> (although it was only added for him to the language).</p>
</li>
<li>
<p>It all only happened, because he stopped using <code>this</code>. So he doesn’t need those.</p>
</li>
<li>
<p>He also stopped using <code>null</code>, because it doesn’t make any sense to have two kinds of undefined: <code>null</code> and <code>undefined</code>.</p>
</li>
<li>
<p>He stopped using falsiness.</p>
</li>
<li>
<p>He doesn’t use <code>for</code> statements anymore, just the new native array methods or <code>Object.keys</code>.</p>
</li>
</ul>
<pre><code class="language-js">Object.keys(obj).forEach(function(key) {
  /* ... */
});
</code></pre>
<h2 id="he-made-some-thoughts-about-the-next-language-after-javascript">He made some thoughts about the next language after JavaScript</h2>
<ul>
<li>Neither of Dart or TypeScript is the forward looking thing we need.</li>
<li>Getting adoption of a new language is going to be extremely difficult, because programmers are as emotional as other people.
Also every change needs a decade to get accepted.</li>
<li>Getting away from classes is a good thing, but he’s not an advocate of prototypal inheritance anymore.</li>
<li>He proposes class-free object oriented programming aka using closures when writing objects. Like this:</li>
</ul>
<pre><code class="language-js">function constructor(spec) {
  let { member } = spec,
    { other } = other_constructor(spec),
    method = function() {
      // member, other, methid, spec
    };

  return Object.freeze({
    method,
    other,
  });
}
</code></pre>
<ul>
<li>He also proposes a new number type for the next generation programming languages. It’s called <a href="http://dec64.com/" target="_blank" rel="noopener">DEC64</a>.
With this new - one and only - number type he wants to fight against problems like <code>0.1 + 0.2 != 0.3</code>. (Binary Floating Points originating from 1950’s)
He also talks about the two types of requirements, business vs. sceintific - exact cent values vs. approximate values.</li>
</ul>
<p>I think it was a very interesting talk. Douglas Crockford had many interesting points about programming in modern JavaScript.
There are some points which are maybe debatable.
What do you think? Do you agree with him? Do you have better ideas? Please share your thoughts in the comments below.</p>
]]></description><link>https://bdadam.com/blog/video-douglas-crockford-about-the-new-good-parts.html</link><guid isPermaLink="true">https://bdadam.com/blog/video-douglas-crockford-about-the-new-good-parts.html</guid><pubDate>Mon, 20 Oct 2014 21:00:00 GMT</pubDate></item><item><title><![CDATA[Automatically adjusting the height of a textarea to its content text]]></title><description><![CDATA[<p>While I was working on a simple web based markdown editor I needed something where the users can type their texts. My first thought was to use a DIV with the contenteditable attribute. But it introduced many problems, which I did not want to fight. I only needed something simple and stupid - the good old <code>TEXTAREA</code>.</p>

<p>But also textareas have a big problem: they have a fixed height per default.
You can either set the <code>rows</code> attribute to tell how many rows should be displayed, or you can set their <code>style.height</code> properties.
But unfortunately there is no auto-height property.</p>
<h2 id="the-idea">The idea</h2>
<p>After every change in the text we have to measure how high the content is. Fortunately there is a method to do it.
<code>element.scrollHeight</code> gives us the height of the content, regardless of visible scrollbars.
To be able to decrease the size we set the height each time back to zero so that scrollHeight reports the required minimum and not more.
E.g. when the user deletes a line.</p>
<p>We also have to calculate the size of the border and outline, so that we don’t give any chance for the content to be cut off, or that a scrollbar is shown.</p>
<p>Then we set the <code>style.height</code> property to the calculated height.</p>
<p>To do this every time, we use the <code>oninput</code> event, which is fired every time the text content changes.
Contrary to <code>onchange</code> which only fires when the users clicks away.</p>
<h2 id="show-me-the-code">Show me the code</h2>
<pre><code class="language-html">&lt;textarea
  data-adaptheight
  rows=&quot;3&quot;
  cols=&quot;40&quot;
  placeholder=&quot;Your input&quot;
  style=&quot;padding: 16px; line-height: 1.5;&quot;
&gt;&lt;/textarea&gt;
&lt;script&gt;
  (function () {
    function adjustHeight(el, minHeight) {
      // Calculate height of border (and scroll bar if displayed)
      // See details here: https://stackoverflow.com/questions/22675126/what-is-offsetheight-clientheight-scrollheight
      var borderHeight = el.offsetHeight - el.clientHeight;

      // set the height to 0 in case of it has to be shrinked
      el.style.height = 0;

      // set the correct height
      // el.scrollHeight is the full height of the content, not just the visible part
      el.style.height =
        Math.max(minHeight, el.scrollHeight) + borderHeight + 'px';
    }

    // we use the &quot;data-adaptheight&quot; attribute as a marker
    var textAreas = [].slice.call(
      document.querySelectorAll('textarea[data-adaptheight]')
    );

    // iterate through all the textareas on the page
    textAreas.forEach(function (el) {
      // we need box-sizing: border-box, if the textarea has padding
      el.style.boxSizing = 'border-box';

      // We disable vertical resizing
      el.style.resize = 'horizontal';

      // we hide vertical scrollbars
      el.style.overflowY = 'hidden';

      var initialContent = el.innerHTML;

      // We empty the textbox so that we can calculate the minimum height based on the rows attribute
      el.innerHTML = '';

      // the minimum height initiated through the &quot;rows&quot; attribute
      var minHeight = el.scrollHeight;

      // We set back the original content
      el.innerHTML = initialContent;

      el.addEventListener('input', function () {
        adjustHeight(el, minHeight);
      });

      // we have to readjust when window size changes (e.g. orientation change)
      window.addEventListener('resize', function () {
        adjustHeight(el, minHeight);
      });

      // we adjust height to the initial content
      adjustHeight(el, minHeight);
    });
  })();
&lt;/script&gt;
</code></pre>
<h2 id="demo">Demo</h2>
<p>Please type in some text and see it for yourself. Initial height is 3 rows.</p>
<p>Please not that if the text is long then you will see a vertical scrollbar which comes from the iframe used to embed the demo into the article.
The scrollbar does not come from the <code>TEXTAREA</code> component.</p>
<iframe src="/demo/textarea-auto-height.html" data-hide-code style="width: 100%; height: 350px;" frameborder="0"></iframe>
<h2 id="tradeoffs">Tradeoffs</h2>
<p>Every keypress causes repaints. Because we set the height of the textarea to 0 and then to the calculated value.
This should however be negligible, because most users can only type at most a few characters a second.
Therefore it shouldn’t cause any noticeable performance drawbacks.</p>
<h2 id="where-to-use-it-for%3F">Where to use it for?</h2>
<p>There are many cases in which this can be useful. Amongst others:</p>
<ul>
<li>Text editors</li>
<li>Code editors</li>
<li>Comment boxes</li>
</ul>
<h2 id="for-production">For production</h2>
<p>This article is only meant for simple use cases or as a proof of concept work.
For production (and therefore maybe more complex usecases) I would rather recommend using a library such as <a href="https://github.com/jackmoore/autosize" target="_blank" rel="noopener">autosize</a>.
These libraries deal with browser bugs and other edge cases.</p>
<h2 id="resources">Resources</h2>
<ul>
<li>For differences between <code>offsetHeight</code>, <code>clientHeight</code> and <code>scrollHeight</code> please see <a href="https://stackoverflow.com/a/22675563/2374649" target="_blank" rel="noopener">this StackOverflow answer</a></li>
</ul>
<p><strong>Do you like it? Do you already use it? Please leave a comment below - the comment box is auto adjusted by default. :)</strong></p>
]]></description><link>https://bdadam.com/blog/automatically-adapting-the-height-textarea.html</link><guid isPermaLink="true">https://bdadam.com/blog/automatically-adapting-the-height-textarea.html</guid><pubDate>Wed, 15 Oct 2014 23:00:00 GMT</pubDate></item><item><title><![CDATA[Loading webfonts with high performance on responsive websites]]></title><description><![CDATA[<p>Once upon a time every website was only using Arial, Verdana, Garamond or Times New Roman for rendering the text, because these font were the only ones reliably installed on almost any computer. But these times are over. Webfonts are spread all over the internet, but we still don’t really know, how to load them efficiently.</p>

<p>Here is my simple guide on what to do, to offer the optimal user experience without having to avoid the expensive accessories (a.k.a. the webfonts).</p>
<p><figure><a href="/article-assets/pagespeed99.jpg"><img src="/article-assets/pagespeed99.jpg" alt=""Google Page Speed Screenshot""></a><figcaption>High score on Google Page Speed Insights (99/100)</figcaption></figure></p>
<h2 id="0.-tldr">0. TLDR</h2>
<p>The essence of the technique:</p>
<ol>
<li>Only serve fonts in woff format</li>
<li>Other browsers get the old “websafe” fonts</li>
<li>Download the font in “binary” format and optimize it</li>
<li>Serve the fonts yourself</li>
<li>Serve them as CSS files - base64 encoded data URIs</li>
<li>If the user doesn’t have the font, load it asynchronously and store in localStorage</li>
<li>Otherwise load it from localStorage without accessing the server</li>
<li>Have fun because your site renders much faster and your users have a much better usability experience</li>
</ol>
<p>For those who are still reading here are my explanations for the points above.</p>
<p><a id="update1"></a></p>
<h3 id="update---2014%2F10%2F09">Update - 2014/10/09</h3>
<p>If you don’t believe in this optimization, I created two demo pages. Test them and take a look at how resources are loaded, what is blocking, what isn’t.</p>
<ol>
<li><a href="/samples/webfonts-conventional.html">Demo page: Loading from Google Fonts</a></li>
<li><a href="https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fbdadam.com%2Fsamples%2Fwebfonts-conventional%2F" target="_blank" rel="noopener">Page Speed Insights: Loading with Google Fonts (79/100)</a></li>
<li><a href="/samples/webfonts-optimized.html">Demo page: Loading Asynchronously and serving from localStorage later on</a></li>
<li><a href="https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fbdadam.com%2Fsamples%2Fwebfonts-optimized%2F" target="_blank" rel="noopener">Page Speed Insights: Async loading/localStorage (100/100)</a></li>
</ol>
<h2 id="1.-browser-support">1. Browser support</h2>
<p>According to <a href="https://caniuse.com/#search=woff" target="_blank" rel="noopener">caniuse</a>, 84% of users’ browsers support <code>woff</code> format.
The only exceptions are the usual old browsers - IE8 and old stock android browsers.
Therefore it is mostly enough to only provide webfonts for the modern browsers which support the <code>woff</code> format.
The old ones should only show a fallback font (e.g. Arial).
The users will also be thankful for having better performance browsing your website. Just try to find something which fits in your design.</p>
<h2 id="2.-don%E2%80%99t-use-external-providers-like-google-fonts-or-typekit">2. Don’t use external providers like Google Fonts or Typekit</h2>
<p>They either cause many extra blocking requests or annoying blinking if loading asynchronously.
We’ll see shortly that there is a much better way of serving webfonts.</p>
<h2 id="3.-the-licence-matters">3. The licence matters</h2>
<p>Choose a webfont which you can serve yourself. Unfortunately not every licence allows this.
Fortunately there are many which do - like the open source ones. Some of them are Open Sans or Source Sans Pro.
When you found your font, download the “binary” files (otf or ttf).</p>
<h2 id="4.-optimizing%2C-reducing-size%2C-generating-the-css">4. Optimizing, reducing size, generating the CSS</h2>
<p>Head on over to the <a href="https://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="noopener">Font Squirrel Webfont Generator</a>.</p>
<p>When choosing expert mode we can choose to remove some charsets.
You have to decide which character sets you really need. Is your content only in english? Then you just need a basic subset.
Is your content in chineese? Then you most probably need everything.</p>
<p>It is important to choose the option to generate CSS files which contains the base64 encoded fonts. This file is what we really need.</p>
<h2 id="5.-serving-the-css-file">5. Serving the CSS file</h2>
<p>This file is going to be quite large (up to 100-300 kB) depending on your choice on charsets and the other options.
Therefore it is important to gzip it correctly and setting strong cacheability when serving it to the users.</p>
<p>Fortunately you are going to serve this file only once for your visitors.
The first time, when the user doesn’t have the font file, their browser downloads it asynchronously and stores it in localStorage.
This time users with slower connections can see when the browsers repaints the fallback fonts with your webfonts, but it only happens at most once.
Many users won’t notice anything at all.</p>
<p>From the second page load on you just load the CSS file from the localStorage. Which is reasonably fast (5-50ms).
The users won’t see any blinking, because all the operations are synchronous, but only take a couple of milliseconds.</p>
<h2 id="6.-show-me-the-code">6. Show me the code</h2>
<p>Since we store the file in localStorage this technique only needs client side code. Here you are.</p>
<pre><code class="language-html">&lt;head&gt;
  ...
  &lt;script&gt;
    (function () {
      function addFont() {
        var style = document.createElement('style');
        style.rel = 'stylesheet';
        document.head.appendChild(style);
        style.textContent = localStorage.sourceSansPro;
      }

      try {
        if (localStorage.sourceSansPro) {
          // The font is in localStorage, we can load it directly
          addFont();
        } else {
          // We have to first load the font file asynchronously
          var request = new XMLHttpRequest();
          request.open('GET', '/path/to/source-sans-pro.woff.css', true);

          request.onload = function () {
            if (request.status &gt;= 200 &amp;&amp; request.status &lt; 400) {
              // We save the file in localStorage
              localStorage.sourceSansPro = request.responseText;

              // ... and load the font
              addFont();
            }
          };

          request.send();
        }
      } catch (ex) {
        // maybe load the font synchronously for woff-capable browsers
        // to avoid blinking on every request when localStorage is not available
      }
    })();
  &lt;/script&gt;
  ...
&lt;/head&gt;
</code></pre>
<h2 id="7.-what-did-we-achieve">7. What did we achieve</h2>
<ol>
<li>Eliminated at least one - but typically many - blocking requests</li>
<li>At most one blinking for the user when the fallback font gets replaced by the webfont (first visit, first request)</li>
<li>Faster render time on the first page request</li>
<li>Better score on Google Page Speed Insights and <a href="http://WebPageTest.org" target="_blank" rel="noopener">WebPageTest.org</a></li>
</ol>
<h2 id="8.-see-it-in-action">8. See it in action</h2>
<p>This technique is used on my blog. You can test it with your smartphone, tablet or laptop. It’s fast, I promise. :)</p>
<p><strong>There are still some fine details which are missing from this post.
If you have questions or feedback, you are more than welcome to leave a comment.</strong></p>
<p><a id="update2"></a></p>
<h3 id="update---2014%2F10%2F11">Update - 2014/10/11</h3>
<p>A Twitter user, <a href="https://twitter.com/Kseso" target="_blank" rel="noopener">@Kseso</a>, made me aware of another method, which also proceeds to a 99/100 score on Google Page Speed Insights.
The method is to inline the CSS what Google Fonts delivers.</p>
<p>I advise against this method, because it delays text rendering quite a lot. So let’s take a deeper look what happens here.</p>
<ol>
<li>We define font faces directly in the HTML file like this:</li>
</ol>
<pre><code class="language-html">&lt;head&gt;
  ...
  &lt;style&gt;
    @font-face {
      font-family: 'Source Sans Pro';
      font-style: normal;
      font-weight: 400;
      src: local('Source Sans Pro'), local('SourceSansPro-Regular'),
        url(https://fonts.gstatic.com/s/sourcesanspro/v9/ODelI1aHBYDBqgeIAH2zlBBHWFfxJXS04xYOz0jw624.woff)
          format('woff');
    }
  &lt;/style&gt;
  ...
&lt;/head&gt;
</code></pre>
<ol>
<li>The browser doesn’t start to fetch the font file, until it doesn’t know whether it is needed at all somewhere in the page.</li>
<li>The browser waits until DOM and CSSOM are constructed</li>
<li>The browser starts to fetch the font file from Google Fonts
(please notice, there is also an extra DNS request for <a href="http://fonts.gstatic.com" target="_blank" rel="noopener">fonts.gstatic.com</a>).
This timeline shows that the browser only starts fetching the font file, just before the DOMContentLoaded event.
<figure><a href="/article-assets/gfonts-timeline.jpg"><img src="/article-assets/gfonts-timeline.jpg" alt="Chrome Dev Tools timeline screenshot"></a><figcaption>Chrome Dev Tools Timeline of loading fonts from Google Fonts</figcaption></figure></li>
<li>If this wasn’t bad enough, most browsers will just render blank text, where those font faces are used:
<ol>
<li>Only IE starts rendering <strong>immediately</strong> with the fallback font</li>
<li>Firefox and Chrome35+ wait for the font download to complete <strong>with a 3 seconds timeout</strong> (after which the fallback font is used)</li>
<li>Safari and Chrome pre 35 wait for the font download to complete <strong>without any timeout</strong></li>
</ol>
</li>
</ol>
<p>Therefore on slow connections you will delay rendering of your text content up to 3 seconds in most browsers.
In worst case, if your font takes ages to load (e.g. because of bad mobile connection), Safari users will never see your text content and just leave your page.
Your users can end up seeing a white page until the timeout kicks in.</p>
<p>More info can be found on <a href="https://www.igvita.com/2012/09/12/web-fonts-performance-making-pretty-fast/" target="_blank" rel="noopener">Ilya Gregorik’s blog</a>.</p>
<p>I also created <a href="/samples/webfonts-googlefonts.html">a test page</a> where you can check it out yourself.</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://www.igvita.com/2012/09/12/web-fonts-performance-making-pretty-fast/" target="_blank" rel="noopener">Web Fonts Performance: Making Pretty, Fast - By Ilya Grigorik</a></li>
<li><a href="https://www.smashingmagazine.com/2014/09/08/improving-smashing-magazine-performance-case-study/" target="_blank" rel="noopener">Improving Smashing Magazine’s Performance: A Case Study</a></li>
<li><a href="https://www.filamentgroup.com/lab/performance-rwd.html" target="_blank" rel="noopener">How we make RWD sites load fast as heck</a></li>
</ul>
<h2 id="translations">Translations</h2>
<p>This article was <a href="https://css-live.ru/articles-css/bystraya-zagruzka-veb-shriftov-na-adaptivnyx-sajtax.html" target="_blank" rel="noopener">translated to Russian by Максим Усачев</a>.</p>
]]></description><link>https://bdadam.com/blog/loading-webfonts-with-high-performance.html</link><guid isPermaLink="true">https://bdadam.com/blog/loading-webfonts-with-high-performance.html</guid><pubDate>Wed, 08 Oct 2014 19:00:00 GMT</pubDate></item><item><title><![CDATA[Loading web pages really fast - optimistic page loading with Instantclick.io]]></title><description><![CDATA[<p>There is a very clever trick, which can turn any web page into a single page app. Without requiring you to do any significant work. Fortunately there is also a very handy tool, which makes use of this trick and does a great job.</p>

<p>As web developers we usually want to anything to load pages faster for the user. What about if started loading a page, before the user clicks a link?</p>
<h2 id="optimistic-page-loading">Optimistic page loading</h2>
<p>It is absolutely possible to make the user experience much better by loading content much faster.
The trick is, to start (optimistically) loading the page when the user only just hovers over a link.
There is a significant delay between hovering and clicking - usually more then 100 ms.
We can use this time to prefetch the next page which is behind the link, so that we can show it right after the click event was fired.</p>
<p>You can see this trick in action for example on this blog. Just click on some links on the page.</p>
<h2 id="instantclick.io"><a href="http://Instantclick.io" target="_blank" rel="noopener">Instantclick.io</a></h2>
<p>You can get this tool here: <a href="http://instantclick.io/" target="_blank" rel="noopener">http://instantclick.io/</a>.</p>
<p>Just put a single script into your page and you should be almost fine. Maybe you need some blacklisting/whitelisting,
so that some links are not prefetched automatically. Or maybe you want some scripts to execute on every request.
Everything is easily doable. Just head over to the downloads section. There are some useful information about the integration.</p>
<p>They also have a test page, where you can measure how much time you can shave off of the load time.
It measures the time difference between mosuedown event and click event - and also between touchstart event and click event.</p>
<h2 id="mousedown-instead-of-hover">Mousedown instead of hover</h2>
<p>If a web page has many links, it is better to only prefetch when the user really pressed the mouse button.
It still gives a decent advantage over the traditional way.</p>
<h2 id="touch-support">Touch support</h2>
<p>The library comes with touch support out of the box.</p>
<p><strong>Do you like it?</strong> Do you already use this library? Tell me about your experience in the comments.</p>
]]></description><link>https://bdadam.com/blog/optimistic-page-loading-with-instantclick-io.html</link><guid isPermaLink="true">https://bdadam.com/blog/optimistic-page-loading-with-instantclick-io.html</guid><pubDate>Wed, 08 Oct 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Generating sound effects with client side JavaScript]]></title><description><![CDATA[<p>A few years ago I came across a simple library with which we can easily generate 8-bit sound effects for JavaScript games and apps. This library is very handy for hackathons or weekend coding sessions.</p>

<p>This small library is called <a href="https://github.com/egonelbre/jsfx" target="_blank" rel="noopener">jsfx</a>. Info on usage and a demo site can be found on its GitHub page.</p>
<h2 id="how-does-it-work%3F">How does it work?</h2>
<p>This lib generates wave files as data URIs and then feeds them to an <code>&lt;audio&gt;</code> element.</p>
<h2 id="demo">Demo</h2>
<p>Please click on the buttons to play the corresponding sound effects.</p>
<iframe src="/demo/sound-effects/index.html" style="width: 100%; height: 40px;" frameborder="0" loading="lazy"></iframe>
<pre class="language-html" style="margin: 0!important; max-height: 100%;"><code class="language-html">&#60;div class="container"&#62;
    &#60;button id="btnPickup"&#62;Pick up a coin&#60;/button&#62;
    &#60;button id="btnLaser"&#62;Laser&#60;/button&#62;
    &#60;button id="btnJump"&#62;Jump&#60;/button&#62;
    &#60;button id="btnShoot"&#62;Shoot&#60;/button&#62;
&#60;/div&#62;

&#60;script src="jsfx/audio.js"&#62;&#60;/script&#62;
&#60;script src="jsfx/jsfx.js"&#62;&#60;/script&#62;
&#60;script src="jsfx/jsfxlib.js"&#62;&#60;/script&#62;
&#60;script&#62;
    function setup(id, params) {
        var wave = jsfxlib.createWave(params);
        document
            .getElementById(id)
            .addEventListener('click', function () {
                wave.play();
            });
    }

    setup('btnPickup', [
        'square',
        0.0,
        0.4,
        0.0,
        0.014,
        0.39,
        0.342,
        20.0,
        1371.0,
        2400.0,
        0.0,
        0.0,
        0.0,
        0.01,
        0.0003,
        0.0,
        0.338,
        0.192,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0
    ]);
    setup('btnJump', [
        'square',
        0.0,
        0.4,
        0.0,
        0.368,
        0.0,
        0.146,
        20.0,
        454.0,
        2400.0,
        0.384,
        0.0,
        0.0,
        0.01,
        0.0003,
        0.0,
        0.0,
        0.0,
        0.221,
        0.0,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0
    ]);
    setup('btnShoot', [
        'saw',
        0.0,
        0.4,
        0.0,
        0.204,
        0.0,
        0.318,
        20.0,
        951.0,
        2400.0,
        -0.588,
        0.0,
        0.0,
        0.01,
        0.0003,
        0.0,
        0.0,
        0.0,
        0.344,
        0.186,
        0.0,
        0.154,
        0.01,
        1.0,
        0.0,
        0.0,
        0.039,
        0.0
    ]);
    setup('btnLaser', [
        'square',
        0.0,
        0.4,
        0.0,
        0.21,
        0.0,
        0.184,
        20.0,
        1180.0,
        2400.0,
        -0.518,
        0.0,
        0.0,
        0.01,
        0.0003,
        0.0,
        0.0,
        0.0,
        0.499,
        -0.212,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.134,
        0.0
    ]);
&#60;/script&#62;
&#60;style&#62;
    body,
    div,
    html {
        padding: 0;
        margin: 0;
    }
    .container {
        height: 100vh;
        display: flex;
        justify-content: space-around;
        align-items: center;
        max-width: 400px;
    }
&#60;/style&#62;</code></pre>
]]></description><link>https://bdadam.com/blog/generating-sound-effects-with-client-side-javascript.html</link><guid isPermaLink="true">https://bdadam.com/blog/generating-sound-effects-with-client-side-javascript.html</guid><pubDate>Sun, 06 Apr 2014 00:00:00 GMT</pubDate></item><item><title><![CDATA[Boilerplate for static site generation]]></title><description><![CDATA[<p>As I already mentioned before, I really like simple things like static webpages. To speed things up, I created a boilerplate, which can be used by anybody to generate static websites.</p>

<p><a href="/blog/why-i-chose-a-statically-generated-website/">This blog is also statically generated.</a>
Statically generating websites has many advantages. Some of these are</p>
<ol>
<li>These sites can be hosted everywhere</li>
<li>No backend to be hacked</li>
<li>Outstanding performance</li>
<li>etc.</li>
</ol>
<p>The boilerplate code can be found on GitHub: <a href="https://github.com/bdadam/static-site-boilerplate" target="_blank" rel="noopener">bdadam/static-site-boilerplate</a></p>
<h2 id="what-can-this-boilerplate-do-for-you%3F">What can this boilerplate do for you?</h2>
<ol>
<li>It generates html from markdown files with the help of <a href="https://assemble.io/" target="_blank" rel="noopener">Assemble</a>.</li>
<li>It generates minified and optimized css file(s) with less and uncss</li>
<li>It generates minified and optimized JavaScript files with RequireJS</li>
<li>During development the affected files are regenerated when something changes (GruntJS watch task)</li>
<li>Local webserver with Livereload to immediately see what changes and what does it look like</li>
</ol>
<h2 id="how-to-use-it%3F">How to use it?</h2>
<ol>
<li>Clone this repository <code>git clone https://github.com/bdadam/static-site-boilerplate</code></li>
<li>Install node dependencies <code>npm install</code></li>
<li>Install bower dependencies <code>bower install</code></li>
<li>Simply run <code>grunt build</code> to see that everything works</li>
<li>Run <code>grunt</code> for starting “development mode”</li>
<li>Then edit some files in the <code>content</code> folder and watch the html being regenerated and automatically refreshed in the browser</li>
</ol>
<h2 id="what-is-planned-for-future-releases%3F">What is planned for future releases?</h2>
<ol>
<li>Automatically running JavaScript unit tests with Jasmine</li>
<li>Supporting <code>browserify</code> for building JavaScript files</li>
<li>Adding some Handlebars helpers</li>
<li>Maybe some more partials and templates</li>
<li>Some real examples where you can see it in action</li>
</ol>
<p><strong>I would be glad to hear your feedback in the comments.</strong></p>
]]></description><link>https://bdadam.com/blog/static-site-generation-boilerplate.html</link><guid isPermaLink="true">https://bdadam.com/blog/static-site-generation-boilerplate.html</guid><pubDate>Tue, 25 Mar 2014 22:30:00 GMT</pubDate></item><item><title><![CDATA[Automatically loading Grunt tasks with matchdep]]></title><description><![CDATA[<p>Have you ever installed a new GruntJS-plugin and then forgotten to load it as a task in the gruntfile.js? Matchdep is a handy tool, which can solve this issue.</p>

<h2 id="what-is-matchdep%3F">What is matchdep?</h2>
<p>Matchdep is a tool which can filter node.js dependencies, which are in the <code>package.json</code> file.</p>
<p>Installing it is very easy: <code>npm install --save matchdep</code></p>
<h2 id="automatically-loading-gruntjs-tasks">Automatically loading GruntJS tasks</h2>
<pre><code class="language-js">require('matchdep')
  .filterDev('grunt-*')
  .forEach(grunt.loadNpmTasks);
</code></pre>
<p>What we are doing here is: basically reading all (dev)dependencies from the <code>package.json</code> and filtering those out which begin with ‘grunt-’.
These are tasks like all Grunt contrib tasks (<code>grunt-contrib-concat</code>, <code>grunt-contrib-less</code>, <code>grunt-contrib-copy</code>, etc.)
and other Grunt specific tasks (like <code>grunt-browserify</code> or <code>grunt-hashres</code>).
After filtering we load them as tasks.</p>
<h2 id="what-can-matchdep-be-used-for-besides-loading-grunt-tasks%3F">What can <code>matchdep</code> be used for besides loading Grunt tasks?</h2>
<p>Honestly I must say, I have no idea. But this is still pretty cool, that we don’t have to include each grunt plugin individually.</p>
]]></description><link>https://bdadam.com/blog/automatically-loading-grunt-tasks-with-matchdep.html</link><guid isPermaLink="true">https://bdadam.com/blog/automatically-loading-grunt-tasks-with-matchdep.html</guid><pubDate>Tue, 11 Mar 2014 22:00:00 GMT</pubDate></item><item><title><![CDATA[A simple usability trick for Google Maps]]></title><description><![CDATA[<p>Embedding Google Maps in a website is very easy with its JavaScript API. A simple trick can improve the usability of large maps when users scroll with the mouse wheel over them.</p>

<h2 id="usability-problem">Usability problem</h2>
<p>If you embed Google Maps via its JavaScript API, there is usually a usability question:
<em>What should happen, when the users scroll over the map with their mouse wheels?</em>
The API defaults say: the user should zoom the map.</p>
<p>But that’s in many cases not what users would expect. Especially when the map is large.
Sometimes they just want to scroll the page without zooming the map or having any interaction with it at all.</p>
<h2 id="how-to-solve-it">How to solve it</h2>
<p>There is a possible solution which is very easy and works for many users:</p>
<ol>
<li>Before they had any interaction with the map, disable zooming with the mouse wheel</li>
<li>After they had an interaction, enable zooming with the mouse wheel</li>
<li>When they click away, or interact with other parts of the page, disable zooming with mouse wheel again</li>
</ol>
<h2 id="demo">Demo</h2>
<ol>
<li>Scroll with the mouse wheel over the map</li>
<li>Click onto the map</li>
<li>Start zooming in and out with the mouse wheel</li>
<li>Click somewhere outside of the map</li>
<li>Scroll with mouse wheel over the map to just scroll the page</li>
<li>Repeat these steps [at most a few times - no endless loop :)]</li>
</ol>
<p><strong>NOTE:</strong> Here used to be a demo which no longer works due to changes in the Google Maps API.</p>
<h2 id="update-(16%2F03%2F2014)">Update (16/03/2014)</h2>
<p>I edited the source code to use <code>mousedown</code> event instead of <code>click</code>.
This helps when the user drags the map - dragging counts also as an interaction with the map.</p>
<h2 id="source-code">Source code</h2>
<pre><code class="language-js">var el = $('#map');
var map;

function enableScrollingWithMouseWheel() {
  map.setOptions({ scrollwheel: true });
}

function disableScrollingWithMouseWheel() {
  map.setOptions({ scrollwheel: false });
}

function init() {
  map = new google.maps.Map(el[0], {
    zoom: 10,
    center: new google.maps.LatLng(47.4984056, 19.04075779),
    scrollwheel: false, // disableScrollingWithMouseWheel as default
  });

  google.maps.event.addListener(map, 'mousedown', function() {
    enableScrollingWithMouseWheel();
  });
}

google.maps.event.addDomListener(window, 'load', init);

$('body').on('mousedown', function(event) {
  var clickedInsideMap = $(event.target).parents('#map').length &gt; 0;

  if (!clickedInsideMap) {
    disableScrollingWithMouseWheel();
  }
});

$(window).scroll(function() {
  disableScrollingWithMouseWheel();
});
</code></pre>
]]></description><link>https://bdadam.com/blog/simple-usability-trick-for-google-maps.html</link><guid isPermaLink="true">https://bdadam.com/blog/simple-usability-trick-for-google-maps.html</guid><pubDate>Mon, 10 Mar 2014 22:00:00 GMT</pubDate></item><item><title><![CDATA[Switching background color of an image with Gimp]]></title><description><![CDATA[<p>As a web developers we sometimes come across some tasks which are not that strictly related to development, but rather to design. For me such a task was a few days ago, when I found a neat background pattern, but the color just didn’t fit the site I was working on.</p>

<p>For this mini tutorial I’m using this <a href="https://subtlepatterns.com/food/" target="_blank" rel="noopener">pattern from subtlepatterns.com</a>.</p>
<p><figure><a href="/article-assets/gimp-background-change/food_comparision.png"><img src="/article-assets/gimp-background-change/food_comparision.png" alt="Comparision of the images before and after"></a><figcaption>Original pattern on the left, modified on the right</figcaption></figure></p>
<h2 id="here-is-what-to-do%3A">Here is what to do:</h2>
<ol>
<li>Open the picture in Gimp</li>
<li>Get the hex code of the color, which you want to switch (in this case fac564)</li>
<li>Then go to Colors &gt; Color to Alpha… (If it’s grayed out, just switch the Image &gt; Mode from Indexed to <strong>RGB</strong>)</li>
<li>After this you should see the same image, just with transparent background color. So now we create a new background layer with the desired color.</li>
<li>At the end export the new image and have fun</li>
</ol>
<h2 id="the-steps-as-images">The steps as images</h2>
<p><figure><a href="/article-assets/gimp-background-change/gimp-capture-color-code.jpg"><img src="/article-assets/gimp-background-change/gimp-capture-color-code.jpg" alt="Screenshot of step 1"></a><figcaption>Capturing color code</figcaption></figure></p>
<p><figure><a href="/article-assets/gimp-background-change/gimp-color-to-alpha-grayed-out.jpg"><img src="/article-assets/gimp-background-change/gimp-color-to-alpha-grayed-out.jpg" alt="Screenshot of step 2"></a><figcaption>Color to Alpha grayed out</figcaption></figure></p>
<p><figure><a href="/article-assets/gimp-background-change/gimp-change-mode-to-rgb.jpg"><img src="/article-assets/gimp-background-change/gimp-change-mode-to-rgb.jpg" alt="Screenshot of step 3"></a><figcaption>Image mode to RGB</figcaption></figure></p>
<p><figure><a href="/article-assets/gimp-background-change/gimp-color-to-alpha.jpg"><img src="/article-assets/gimp-background-change/gimp-color-to-alpha.jpg" alt="Screenshot of step 4"></a><figcaption>Color to Alpha</figcaption></figure></p>
<p><figure><a href="/article-assets/gimp-background-change/gimp-color-to-alpha-window.jpg"><img src="/article-assets/gimp-background-change/gimp-color-to-alpha-window.jpg" alt="Screenshot of step 5"></a><figcaption>Color to Alpha window</figcaption></figure></p>
<p><figure><a href="/article-assets/gimp-background-change/gimp-new-background-layer.jpg"><img src="/article-assets/gimp-background-change/gimp-new-background-layer.jpg" alt="Screenshot of step 6"></a><figcaption>Final step - creating new background layer with desired color</figcaption></figure></p>
]]></description><link>https://bdadam.com/blog/switching-background-color-with-gimp.html</link><guid isPermaLink="true">https://bdadam.com/blog/switching-background-color-with-gimp.html</guid><pubDate>Sun, 02 Mar 2014 21:00:00 GMT</pubDate></item><item><title><![CDATA[Panning and scrolling background images using the canvas element]]></title><description><![CDATA[<p>I’m planning to create a simple 2D game in plain JavaScript. As the first step I would like to show, how to animate (pan or scroll) a background image using the canvas element. I am also going to show some basic setup code in order to have a loop where we can draw the frames.</p>

<p>There are two common scenarios for simple 2D games:</p>
<ul>
<li>There is a huge background image for the entire level. All the activities have this same background image, but the viewport’s position is chaging</li>
<li>There is a small image which is scrolled all the time (tipically from right to left) as the player advances</li>
</ul>
<h2 id="panning-the-viewport-inside-the-background-image">Panning the viewport inside the background image</h2>
<!-- <iframe src="https://codepen.io/bdadamm/embed/JjPBvXm" x-style="min-height: 460px; width: 100%;"></iframe>

<iframe src="https://codepen.io/bdadamm/embed/JjPBvXm" style="min-height: 460px; width: 100%;"></iframe>
-->
<iframe src="/article-assets/panning-and-scrolling-background-images-using-the-canvas-element/panning-background.html" style="height: 264px;"></iframe>
<h2 id="demo">Demo</h2>
<p>Please click on the button to start the animation.</p>
<iframe src="/article-assets/panning-and-scrolling-background-images-using-the-canvas-element/canvas-background-panning.html" style="width: 100%; height: 370px;"></iframe>
<h2 id="how-it-works">How it works</h2>
<p>We have a function which is called for every frame our game draws.
In this method we calculate the position of the viewport. For this basic example I chose to derive the position from the elapsed time.
Therefore the camera takes an elliptical path.</p>
<pre><code class="language-js">function draw(delta) {
  totalSeconds += delta;
  var x =
    ((-1 * (img.width - canvas.width)) / 2) *
    (1 + Math.cos(totalSeconds / Math.PI));
  var y =
    ((-1 * (img.height - canvas.height)) / 2) *
    (1 + -Math.sin(totalSeconds / Math.PI));

  context.drawImage(img, x, y);
}
</code></pre>
<h2 id="scrolling-the-background-image-infinitely">Scrolling the background image infinitely</h2>
<p>In the second case the background image is scrolling infinitely as time and the player advances.
It’s like when playing Mario, but the camera is centered on Mario the whole time.</p>
<iframe src="/article-assets/panning-and-scrolling-background-images-using-the-canvas-element/scrolling-background.html" style="width: 100%; height: 200px;"></iframe>
<p>In the animation above we can see, that for this effect we need at least 2 images (can be the same) or more, depending on the viewport size.</p>
<h2 id="demo-2">Demo</h2>
<p>Please click on the button to start the animation.
The vertical black lines mean the edges of the single images.
For this example I’m using the same image and we have a constant speed of 100 pixels/sec.</p>
<iframe src="/article-assets/panning-and-scrolling-background-images-using-the-canvas-element/canvas-background-scrolling.html" style="width: 100%; height: 370px; border: none;"></iframe>
<h2 id="how-it-works-2">How it works</h2>
<p>The background position is also derived from the elapsed time (constant speed).</p>
<ol>
<li>We calculate how many images are needed to cover the viewport: <code>Math.ceil(canvas.width / img.width) + 1</code></li>
<li>We calculate the current X-position: <code>totalSeconds * vx % img.width</code>. Please note the modulo operator here.</li>
<li>We store the current context state and translate our canvas to make the drawing easier.</li>
<li>We draw the images - one after the other.</li>
<li>We restore the context’s state.</li>
</ol>
<pre><code class="language-js">function draw(delta) {
  totalSeconds += delta;

  var vx = 100; // the background scrolls with a speed of 100 pixels/sec
  var numImages = Math.ceil(canvas.width / img.width) + 1;
  var xpos = (totalSeconds * vx) % img.width;

  context.save();
  context.translate(-xpos, 0);
  for (var i = 0; i &lt; numImages; i++) {
    context.drawImage(img, i * img.width, 0);
  }
  context.restore();
}
</code></pre>
<h2 id="all-the-code-which-calls-our-draw()-function">All the code which calls our <code>draw()</code> function</h2>
<p>In order for this to work, we have some more work to do. This is the setup code I used for these examples.</p>
<ol>
<li>I used some basic <code>requestAnimationFrame</code> polyfill</li>
<li>The animation gets only started after the image is loaded successfully (onload).</li>
<li>Some start/stop logic and button</li>
<li>And the <code>loop()</code> function which gets called in every frame when our animation is running. Here we need <code>requestAnimationFrame()</code>.</li>
</ol>
<pre><code class="language-js">(function () {
  window.requestAnimationFrame =
    window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    function (callback) {
      window.setTimeout(callback, 1000 / 60);
    };

  var canvas = document.getElementById('bg');
  var context = canvas.getContext('2d');
  var looping = false;
  var totalSeconds = 0;

  context.translate(0.5, 0.5);

  var img = new Image();
  img.onload = imageLoaded;
  img.src = 'IMG_SOURCE';

  function imageLoaded() {
    draw(0);

    var btn = document.getElementById('btnStart');
    btn.addEventListener('click', function () {
      startStop();
    });
  }

  var lastFrameTime = 0;

  function startStop() {
    looping = !looping;

    if (looping) {
      lastFrameTime = Date.now();
      requestAnimationFrame(loop);
    }
  }

  function loop() {
    if (!looping) {
      return;
    }

    requestAnimationFrame(loop);

    var now = Date.now();
    var deltaSeconds = (now - lastFrameTime) / 1000;
    lastFrameTime = now;
    draw(deltaSeconds);
  }

  function draw(delta) {
    /* Here happens some magic. */
  }
})();
</code></pre>
<p><strong>In order to see the full source code, please view these pages</strong></p>
<ol>
<li><a href="/article-assets/panning-and-scrolling-background-images-using-the-canvas-element/canvas-background-panning.html">Panning the viewport inside the background image</a></li>
<li><a href="/article-assets/panning-and-scrolling-background-images-using-the-canvas-element/canvas-background-scrolling.html">Scrolling the background image</a></li>
</ol>
]]></description><link>https://bdadam.com/blog/panning-and-scrolling-background-images-using-the-canvas-element.html</link><guid isPermaLink="true">https://bdadam.com/blog/panning-and-scrolling-background-images-using-the-canvas-element.html</guid><pubDate>Sat, 01 Mar 2014 17:00:00 GMT</pubDate></item><item><title><![CDATA[Finding a random document in MongoDB (with benchmarks)]]></title><description><![CDATA[<p>Finding a random element is not a trivial task when using MongoDB - especially when performance is crutial.</p>

<h2 id="finding-one-random-document---method-1">Finding one random document - Method 1</h2>
<ol>
<li>
<p>First of all you have to count how many documents you have in the collection.
Optionally you can provide a filter condition (query).</p>
<pre><code class="language-js">N = db.myCollection.count(query);
</code></pre>
</li>
<li>
<p>Then you have to generate a random number which is less than the number you counted before.</p>
<pre><code class="language-js">R = Math.floor(Math.random() * N);
</code></pre>
</li>
<li>
<p>Then skip that many records and retrieve the next one.
If you provided a query at the first step, here you have to use it as well.</p>
<pre><code class="language-js">db.collection
  .find(query)
  .limit(1)
  .skip(R);
</code></pre>
</li>
</ol>
<h3 id="let%E2%80%99s-see-an-example">Let’s see an example</h3>
<pre><code class="language-js">var query = { state: 'OK' };
var n = db.myCollection.count(query);
var r = Math.floor(Math.random() * n);
var randomElement = db.myCollection
  .find(query)
  .limit(1)
  .skip(r);
</code></pre>
<h3 id="pro%3A">Pro:</h3>
<p>The data can be intact, no preparation is needed.</p>
<h3 id="con%3A">Con:</h3>
<ul>
<li>This one is the slowest method.
But this approach may still be OK, depending on the case. It definitely has tradeoffs when the collection has a large amount of documents:
The <code>skip</code> command has to scan at least <code>R</code> number of documents.
If the number of documents retrieved by the query is large, the random number <code>R</code> is also going to be large.</li>
</ul>
<h2 id="finding-one-random-document---method-2">Finding one random document - Method 2</h2>
<p>For this method to work, the data has too meet some constraints:</p>
<ul>
<li>Each document should have a field with a random number, e.g. when saving <code>db.myCollection.save({ name: 'name', ..., rnd: Math.random() })</code></li>
<li>The collection should have an index on this field, e.g. <code>db.myCollection.ensureIndex({ rnd: 1 })</code></li>
</ul>
<p>When the data is all set up, querying is rather easy:</p>
<pre><code class="language-js">var query = {
  state: 'OK',
  rnd: {
    $gte: Math.random(),
  },
};

var randomElement = db.myCollection.findOne({
  $query: query,
  $orderby: { rnd: 1 },
});
</code></pre>
<h3 id="pro%3A-2">Pro:</h3>
<ul>
<li>Not having to skip any document.</li>
</ul>
<h3 id="con%3A-2">Con:</h3>
<ul>
<li>Data has to have field with a random number stored in it</li>
<li>This random field should also have an index</li>
<li>Sorting reduces performance</li>
</ul>
<h2 id="finding-one-random-document---method-2.5">Finding one random document - Method 2.5</h2>
<p>There is a simpler variant of the second method. It doesn’t retrieve a truly random document, but it may be enough for the specific case.</p>
<pre><code class="language-js">var query = {
  state: 'OK',
  rnd: {
    $gte: Math.random(),
  },
};

var randomElement = db.myCollection.findOne(query);
</code></pre>
<p>Please note that there is no <code>$orderby</code>. This can improve performance. The price is that documents are sorted in “find order” rather than “random order”.
But this could be fine in many cases.</p>
<h3 id="pro%3A-3">Pro:</h3>
<ul>
<li>Not having to skip any document</li>
<li>Performance</li>
</ul>
<h3 id="con%3A-3">Con:</h3>
<ul>
<li>Not truly random document</li>
<li>Data has to have a field with a random number stored in it</li>
<li>This field also should have an index</li>
</ul>
<h2 id="benchmarks">Benchmarks</h2>
<p>I created a very simple benchmark. The setup looks like this:</p>
<pre><code class="language-js">var i = 1000000;
while (i) {
  db.test.save({
    name: 'some lorem ipsum not important',
    rnd: Math.random(),
  });
  i--;
}
db.test.ensureIndex({ rnd: 1 });
</code></pre>
<p>Then I ran all the three methods on my computer with a local database, 10000 times each.</p>
<pre><code class="language-js">var startDate = new Date();
var i = 10000;
while (i) {
  var n = db.test.count();
  var r = Math.floor(Math.random() * n);
  var randomElement = db.test
    .find()
    .limit(1)
    .skip(r);
  i--;
}
var t1 = new Date() - startDate;

var startDate = new Date();
var i = 10000;
while (i) {
  var query = {
    rnd: {
      $gte: Math.random(),
    },
  };

  var randomElement = db.myCollection.findOne({
    $query: query,
    $orderby: { rnd: 1 },
  });
  i--;
}
var t2 = new Date() - startDate;

var startDate = new Date();
var i = 10000;
while (i) {
  var query = {
    rnd: {
      $gte: Math.random(),
    },
  };

  var randomElement = db.myCollection.findOne(query);
  i--;
}
var t3 = new Date() - startDate;

print(t1, t2, t3);
</code></pre>
<h2 id="and-the-winner-is-%E2%80%9Cmethod-2.5%E2%80%9D">And the winner is “Method 2.5”</h2>
<p>Here are my benchmark results:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Method</th>
<th style="text-align:right">Time for 10,000 runs (seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Method 2.5</td>
<td style="text-align:right">2.234</td>
</tr>
<tr>
<td style="text-align:left">Method 2</td>
<td style="text-align:right">2.297</td>
</tr>
<tr>
<td style="text-align:left">Method 1</td>
<td style="text-align:right">2.813</td>
</tr>
</tbody>
</table>
<p>Although the differences are not quite big, the winner is definitely “Method 2.5”.
I think, when using more realistic data, the differences are also going to be much larger.</p>
<p>Do you have your own benchmark results with different data? Please feel free to comment it.</p>
]]></description><link>https://bdadam.com/blog/finding-a-random-document-in-mongodb.html</link><guid isPermaLink="true">https://bdadam.com/blog/finding-a-random-document-in-mongodb.html</guid><pubDate>Sat, 15 Feb 2014 22:00:00 GMT</pubDate></item><item><title><![CDATA[Tracking clicks with Google Analytics]]></title><description><![CDATA[<p>Every website has some links or buttons, users are clicking on them. But do webmasters know which ones do users click most often? Are there maybe some, which are not clicked at all? Maybe you just built a shiny new navigation and you may ask “do users use it?”. Clicktracking gives you the answer. When using Google Analytics the results are just shown on your dashboard.</p>

<h2 id="why-would-you-track-clicks-on-a-website%3F">Why would you track clicks on a website?</h2>
<p>I think the answer to this question is very easy: to know, what users are clicking and where they are clicking.
You maybe have questions like these:</p>
<ul>
<li>Are users using the breadcrumbs?</li>
<li>Are users clicking on ‘back to’ links?</li>
<li>Do they click on the images in the gallery?</li>
<li>What works better, a button or a link?</li>
<li>Are red buttons working better than green buttons on a specific page?</li>
<li>etc.</li>
</ul>
<h2 id="let%E2%80%99s-find-the-answers">Let’s find the answers</h2>
<pre><code class="language-html">&lt;button id=&quot;playVideo&quot;&gt;Play video&lt;/button&gt;
&lt;script&gt;
  $('#playVideo').click(function() {
    video.play(); // doing some work

    _gaq.push(['_trackEvent', 'Videos', 'Play', video.title]); // the 'old' way, when using the old tracking code
    /* or */
    ga('send', 'event', 'Videos', 'Play', video.title); // when using Universal Analytics
  });
&lt;/script&gt;
</code></pre>
<p>This way you track events in Google Analytics which show up under Behaviour &gt; Events on your Dashboard.
In the example above we are always generating an event when somebody clicks on the play button.
With these events we also store what really happened: category=Videos, action=Play, label=‘title of video’.</p>
<h2 id="which-link-was-clicked%3F">Which link was clicked?</h2>
<p>We just have to set the arguments properly, and then we exactly know which link was clicked.</p>
<pre><code class="language-html">&lt;a href=&quot;/my-cool-page.html&quot; class=&quot;greenButton&quot;&gt;Go to my cool page&lt;/a&gt;
...
&lt;a href=&quot;/my-cool-page.html&quot; class=&quot;redButton&quot;&gt;Go to my cool page&lt;/a&gt;
...
&lt;a href=&quot;/my-cool-page.html&quot; class=&quot;blueButton&quot;&gt;Go to my cool page&lt;/a&gt;

&lt;script&gt;
  $('.greenButton, .redButton, .blueButton').click(function() {
    var className = this.className;

    _gaq.push(['_trackEvent', 'Click', 'Link', className]); // the 'old' way, when using the old tracking code
    /* or */
    ga('send', 'event', 'Click', 'Link', className); // when using Universal Analytics
  });
&lt;/script&gt;
</code></pre>
<p>This method is also perfectly suitable for A/B testing. We just have to take care of displaying each variant equally for the visitors of our site.</p>
<h2 id="what-the-docs-don%E2%80%99t-say">What the docs don’t say</h2>
<p>The modern browsers are quite fast. When users click on links, it happens quite often, that Google Analytics has not finished tracking the event.
But the browser navigates away from the page, and at the end the event doesn’t get registered at all.</p>
<p><em>What to do?</em></p>
<p>With listening to <code>mousedown</code> event, we can reduce the number of lost events:</p>
<pre><code class="language-js">$('.myButton').mousedown(function() {
  // track click
});
</code></pre>
<p>Or using a little hack, we can track even more events. But this one has a tradeoff:
the user has to wait more till the new page is loaded. In some situations it is maybe acceptable, but try to avoid this because
slower loading pages usually mean worse user experience. Which means less pageviews, more frustrated users and <em>less conversion</em>.</p>
<p>Here is the hack:</p>
<pre><code class="language-js">$('.myLink').click(function() {
  var href = this.href; // getting the URL of the next page

  setTimeout(function() {
    window.location.href = href; // after a timeout of 250ms we navigate to the URL, where the user wanted to go
  }, 250);

  return false; // preventing default behaviour, so that the browser doesn't navigate away
});
</code></pre>
<p>References:</p>
<ul>
<li><a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events" target="_blank" rel="noopener">Event tracking with Universal Analytics</a></li>
<li><a href="https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide" target="_blank" rel="noopener">Event tracking with ga.js</a></li>
</ul>
]]></description><link>https://bdadam.com/blog/tracking-clicks-with-google-analytics.html</link><guid isPermaLink="true">https://bdadam.com/blog/tracking-clicks-with-google-analytics.html</guid><pubDate>Fri, 14 Feb 2014 22:00:00 GMT</pubDate></item><item><title><![CDATA[Comparison helper for Handlebars.js]]></title><description><![CDATA[<p>Personally, I was always missing some sort of comparison helper in Handlebars.js. I know, I know, it’s sort of being against the philosophy of Handlebars - being logicless. But I still wanted to have it.</p>

<h2 id="comparing-two-variables-almost-like-in-plain-javascript">Comparing two variables almost like in plain JavaScript</h2>
<p>Thankfully I found a similar <a href="https://stackoverflow.com/a/16315366/2374649" target="_blank" rel="noopener">question on Stack Overflow and a superb answer from a user called Jim</a>.</p>
<pre><code class="language-js">Handlebars.registerHelper('ifCond', function(v1, operator, v2, options) {
  switch (operator) {
    case '==':
      return v1 == v2 ? options.fn(this) : options.inverse(this);
    case '===':
      return v1 === v2 ? options.fn(this) : options.inverse(this);
    case '!==':
      return v1 !== v2 ? options.fn(this) : options.inverse(this);
    case '&lt;':
      return v1 &lt; v2 ? options.fn(this) : options.inverse(this);
    case '&lt;=':
      return v1 &lt;= v2 ? options.fn(this) : options.inverse(this);
    case '&gt;':
      return v1 &gt; v2 ? options.fn(this) : options.inverse(this);
    case '&gt;=':
      return v1 &gt;= v2 ? options.fn(this) : options.inverse(this);
    case '&amp;&amp;':
      return v1 &amp;&amp; v2 ? options.fn(this) : options.inverse(this);
    case '||':
      return v1 || v2 ? options.fn(this) : options.inverse(this);
    default:
      return options.inverse(this);
  }
});
</code></pre>
<p>Here is how one would use it:</p>
<pre><code class="language-handlebars">{{#ifCond value &quot;===&quot; value2}}
    Values are equal!
{{else}}
    Values are different!
{{/ifCond}}
</code></pre>
<h2 id="update">Update</h2>
<p>As Eugene Mirotin pointed out, this solution could be much DRYer, so here is an improved variant of the code which does the same thing:</p>
<pre><code class="language-js">(function() {
  function checkCondition(v1, operator, v2) {
    switch (operator) {
      case '==':
        return v1 == v2;
      case '===':
        return v1 === v2;
      case '!==':
        return v1 !== v2;
      case '&lt;':
        return v1 &lt; v2;
      case '&lt;=':
        return v1 &lt;= v2;
      case '&gt;':
        return v1 &gt; v2;
      case '&gt;=':
        return v1 &gt;= v2;
      case '&amp;&amp;':
        return v1 &amp;&amp; v2;
      case '||':
        return v1 || v2;
      default:
        return false;
    }
  }

  Handlebars.registerHelper('ifCond', function(v1, operator, v2, options) {
    return checkCondition(v1, operator, v2)
      ? options.fn(this)
      : options.inverse(this);
  });
})();
</code></pre>
]]></description><link>https://bdadam.com/blog/comparison-helper-for-handlebars.html</link><guid isPermaLink="true">https://bdadam.com/blog/comparison-helper-for-handlebars.html</guid><pubDate>Thu, 13 Feb 2014 22:00:00 GMT</pubDate></item><item><title><![CDATA[One more reason to check for strict equality in JavaScript]]></title><description><![CDATA[<p>There are some things in JavaScript which seem to be strange, like <code>3 == [3]</code> or <code>3 == [[[3]]]</code></p>

<p>Some JavaScript fun without further explanation.</p>
<pre><code class="language-js">var a = [0, 1, 2, 3, 4, 5, 6];
console.log(a[3]); // 3
console.log(a[[3]]); // 3
console.log(a[[[3]]]); // 3
console.log(a[[[[3]]]]); // 3
console.log(a[[[[[3]]]]]); // 3
console.log(a['3']); // 3

console.log(3 == [3]); // true
console.log(3 == [[3]]); // true

console.log(3 === [[3]]); // false

3 === Number([3].valueOf().toString()); // true
console.log([3].valueOf()); // [3]
console.log([3].valueOf().toString()); // 3
console.log(Number('3')); // 3
// therefore:
3 === Number([3].valueOf().toString()); // true
</code></pre>
<h2 id="resources">Resources</h2>
<p>Some questions on Stack Overflow:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/1995113/strangest-language-feature/2008728#2008728" target="_blank" rel="noopener">Strangest language feature</a></li>
<li><a href="https://stackoverflow.com/a/1724551" target="_blank" rel="noopener">Why does 2 == [2] in JavaScript?</a></li>
</ul>
]]></description><link>https://bdadam.com/blog/one-more-reason-to-check-for-strict-equality-in-javascript.html</link><guid isPermaLink="true">https://bdadam.com/blog/one-more-reason-to-check-for-strict-equality-in-javascript.html</guid><pubDate>Wed, 12 Feb 2014 22:00:00 GMT</pubDate></item><item><title><![CDATA[Finally always wins, unless you crash your computer meanwhile]]></title><description><![CDATA[<p>In JavaScript it is perfectly valid to have a return statement in a <code>finally</code> block. But this doesn’t mean, you should really put it in there.</p>

<p>Consider the following code:</p>
<pre><code class="language-js">function whatDoesThisReturn() {
  try {
    return false;
  } finally {
    return true;
  }
}

console.log(whatDoesThisReturn());
</code></pre>
<p>Basically the <code>finally</code> block is called after the <code>try</code> block, therefore it overrides the return value.</p>
<p><em>So this function returns <code>true</code>.</em></p>
]]></description><link>https://bdadam.com/blog/finally-always-wins-unless-you-crash-your-computer-meanwhile.html</link><guid isPermaLink="true">https://bdadam.com/blog/finally-always-wins-unless-you-crash-your-computer-meanwhile.html</guid><pubDate>Tue, 11 Feb 2014 21:30:00 GMT</pubDate></item></channel></rss>