{"slug":"finally-always-wins-unless-you-crash-your-computer-meanwhile","title":"Finally always wins, unless you crash your computer meanwhile","description":"JavaScript is a funny language","published":true,"date":"2014-02-11 22:30","tags":["javascript","fun"],"abstract":"","md":"\n\nIn JavaScript it is perfectly valid to have a return statement in a finally block. But this doesn't mean, you should really put it in there.\nConsider the following code:\n\n```JavaScript\nfunction whatDoesThisReturn() {\n    try {\n        return false;\n    } finally {\n        return true;\n    }\n}\n\nconsole.log(whatDoesThisReturn());\n```\n\nBasically the `finally` block is called after the `try` block, therefore it overrides the return value.\n\n*So this function returns `true`.*","_id":"11hT7Na5CgCRP2Rm"}
{"slug":"wow-i-started-a-blog","title":"Wow, I started a blog","description":"New year, new chance, new site, new blog","published":true,"date":{"$$date":1388534400000},"tags":["blogging"],"abstract":"So the new year has come and I decided to start a blog. I try to learn new things every day. Here I want to collect my thoughts and document what I have learned so far, so that I don't forget them and don't have to learn them again later.","md":"So the new year has come and I decided to start a blog. I try to learn new things every day. Here I want to collect my thoughts and document what I have learned so far, so that I don't forget them and don't have to learn them again later.\n\n","_id":"1I3z7oKZ40hKSrHQ"}
{"slug":"strong-caching-with-nginx","title":"Strong caching with NGINX","description":"Enabling strong caching for assets is very important, here is an example how to do it with nginx for static files","published":true,"date":"2014-02-02 00:10","tags":["nginx","caching"],"abstract":"Strong caching is very important nowadays since it can reduce page load times for the users (and eventually it can also reduce network transfer costs for the publishers). Here we see a simple example how to do it with NGINX for static files like css, JavaScript and images.","md":"Strong caching is very important nowadays since it can reduce page load times for the users (and eventually it can also reduce network transfer costs for the publishers). Here we see a simple example how to do it with NGINX for static files like css, JavaScript and images.\n\n```nginx\nserver {\n    location ~* \\.(?:ico|css|js|gif|jpe?g|png)$ {\n        root /var/www/mysite;\n        expires max;\n        add_header Cache-Control \"public\";\n        access_log off;\n        break;\n    }\n}\n```\n\nOf course after modifying the config file we have to reload the configs (e. g. on Ubuntu we have to type `sudo /etc/init.d/nginx reload`)\n\nThere are a few things to note here:\n* we set the \"expires\" header to max age, which means these resources can stay in the browser cache 'forever'\n* we are setting the \"Cache-Control\" header to \"public\", which means that the resource \"may be cached in public shared caches\"\n* we turn off access logging here, because these requests are in many cases not that important\n* if you set expiration to max-age, you have to be sure that the requested resources really never change (some kind of cache busting)\n* these settings can live in the `location` section or in the `server` section of an nginx config file\n\nHave you already enabled strong caching for yout asset files?\n\n** Update:**\nMaybe you noticed the lookahead in the regex.\nIt has a reason to be there: this way the regex engine doesn't create a capture group (no $1) so it has better performance.","_id":"1fwRwg8HD7kabblg"}
{"slug":"automatically-loading-grunt-tasks-with-matchdep","title":"Automatically loading Grunt tasks with matchdep","description":"Matchdep is a handy tool for filtering dependencies in node.js projects","published":true,"date":"2014-03-11 23:00","tags":["javascript","node.js","grunt"],"abstract":"Have you ever installed a new GruntJS-plugin and then forgotten to load it as a task in the gruntfile.js? Matchdep is a handy tool, which can solve this issue.","md":"Have you ever installed a new GruntJS-plugin and then forgotten to load it as a task in the gruntfile.js? Matchdep is a handy tool, which can solve this issue.\n\n## What is matchdep?\nMatchdep is a tool which can filter node.js dependencies, which are in the `package.json` file.\n\nInstalling it is very easy: `npm install --save matchdep`\n\n## Automatically loading GruntJS tasks\n```JavaScript\nrequire('matchdep').filterDev('grunt-*').forEach(grunt.loadNpmTasks);\n```\n\nWhat we are doing here is: basically reading all (dev)dependencies from the `package.json` and filtering those out which begin with 'grunt-'.\nThese are tasks like all Grunt contrib tasks (`grunt-contrib-concat`, `grunt-contrib-less`, `grunt-contrib-copy`, etc.)\nand other Grunt specific tasks (like `grunt-browserify` or `grunt-hashres`).\nAfter filtering we load them as tasks.\n\n## What can `matchdep` be used for besides loading Grunt tasks?\nHonestly I must say, I have no idea. But this is still pretty cool, that we don't have to include each grunt plugin individually.","_id":"7RnaIsdgAwk9sbFu"}
{"slug":"optimistic-page-loading-with-instantclick-io","title":"Loading web pages really fast - optimistic page loading with Instantclick.io","description":"How to turn traditional websites into single page apps with Instantclick.io","published":true,"date":"2014-10-08 2:00","tags":["javascript","single page app","click","perfmatters"],"abstract":"There is a very clever trick, which can turn any web page into a single page app. Without requiring you to do any significant work. Fortunately there is also a very handy tool, which makes use of this trick and does a great job.","md":"There is a very clever trick, which can turn any web page into a single page app. Without requiring you to do any significant work. Fortunately there is also a very handy tool, which makes use of this trick and does a great job.\n\nAs web developers we usually want to anything to load pages faster for the user. What about if started loading a page, before the user clicks a link?\n\n## Optimistic page loading\n\nIt is absolutely possible to make the user experience much better by loading content much faster.\nThe trick is, to start (optimistically) loading the page when the user only just hovers over a link.\nThere is a significant delay between hovering and clicking - usually more then 100 ms.\nWe can use this time to prefetch the next page which is behind the link, so that we can show it right after the click event was fired.\n\nYou can see this trick in action for example on this blog. Just click on some links on the page.\n\n## Instantclick.io\n\nYou can get this tool here: <a href=\"http://instantclick.io/\" rel=\"external,nofollow\">http://instantclick.io/</a>.\n\nJust put a single script into your page and you should be almost fine. Maybe you need some blacklisting/whitelisting,\nso that some links are not prefetched automatically. Or maybe you want some scripts to execute on every request.\nEverything is easily doable. Just head over to the downloads section. There are some useful information about the integration.\n\nThey also have a test page, where you can measure how much time you can shave off of the load time.\nIt measures the time difference between mosuedown event and click event - and also between touchstart event and click event.\n\n## Mousedown instead of hover\n\nIf a web page has many links, it is better to only prefetch when the user really pressed the mouse button.\nIt still gives a decent advantage over the traditional way.\n\n## Touch support\n\nThe library comes with touch support out of the box.\n\n\n**Do you like it?** Do you already use this library? Tell me about your experience in the comments.","_id":"7VgBvW1Toa05BY9F"}
{"slug":"first-year-of-blogging","title":"After the first year of blogging - what happened on my blog in 2014?","description":"Summary of all that happened on my blog in 2014","published":true,"date":"2015-01-01 17:00","tags":["blog","new year","summary"],"abstract":"I wish you all a happy new year and much fun and success for 2015! Let's have a quick review of the past 365 days.","md":"I wish you all a happy new year and much fun and success for 2015! Let's have a quick review of the past 365 days.\n\n## In 2014 amongst other things I ...\n* published 34 articles\n* researched better webfont loading\n  [1](/blog/loading-webfonts-with-high-performance.html),\n  [2](/blog/better-webfont-loading-with-localstorage-and-woff2.html)\n* learned static site generation with node.js tools\n  [1](/blog/static-site-generation-boilerplate.html),\n  [2](/blog/why-i-chose-a-statically-generated-website.html),\n  [3](/blog/serve-a-practical-command-line-webserver.html),\n  [4](/blog/hosting-static-web-pages-and-assets-with-google-drive.html)\n* began using Instantclick.io for providing better percieved performance\n  [1](/blog/optimistic-page-loading-with-instantclick-io.html)\n* pimped up the good old textarea\n  [1](/blog/adding-tab-support-to-textareas.html),\n  [2](/blog/automatically-adapting-the-height-textarea.html)\n* wrote about some JavaScript thingies\n  [1](/blog/a-simple-pubsub-module-in-javascript.html),\n  [2](/blog/fat-arrows-for-javascript.html),\n  [3](/blog/error-handling-in-javascript.html),\n  [4](/blog/demistifying-angularjs-dependency-injection.html),\n  [5](/blog/defining-properties-in-javascript.html),\n  [6](/blog/finally-always-wins-unless-you-crash-your-computer-meanwhile.html),\n  [7](/blog/one-more-reason-to-check-for-strict-equality-in-javascript.html),\n  [8](/blog/generating-sound-effects-with-client-side-javascript.html)\n* discovered a simple usability improvement for Google Maps [1](/blog/simple-usability-trick-for-google-maps.html)\n\n\n## Top 10 most popular posts\n1. [Loading webfonts with high performance on responsive websites](/blog/loading-webfonts-with-high-performance.html)\n1. [Better webfont loading with using localStorage and providing WOFF2 support](/blog/better-webfont-loading-with-localstorage-and-woff2.html)\n1. [A simple usability trick for Google Maps](/blog/simple-usability-trick-for-google-maps.html)\n1. [Demystifying AngularJS' dependency injection](/blog/demistifying-angularjs-dependency-injection.html)\n1. [Panning and scrolling background images using the canvas element](/blog/panning-and-scrolling-background-images-using-the-canvas-element.html)\n1. [Worth watching: Douglas Crockford speaking about the new good parts of JavaScript in 2014](/blog/video-douglas-crockford-about-the-new-good-parts.html)\n1. [Building desktop apps with node.js and web technologies](/blog/building-desktop-apps-with-node-js-and-web-technologies.html)\n1. [Finding a random document in MongoDB (with benchmarks)](/blog/finding-a-random-document-in-mongodb.html)\n1. [Loading web pages really fast - optimistic page loading with Instantclick.io](/blog/optimistic-page-loading-with-instantclick-io.html)\n1. [Automatically loading Grunt tasks with matchdep](/blog/automatically-loading-grunt-tasks-with-matchdep.html)\n\n\n## What I learned from blogging in 2014?\n* Blogging is fun\n* No matter how much I understand the topic I'm writing about, it still takes a lot of time and effort to publish a post\n* A few times I really used my blog to gather information about things I would have forgotten otherwise\n* I want to go on and publish betters posts and more often\n\n\n#### Resources:\nHappy new year photo: [Wikimedia Commons](http://commons.wikimedia.org/wiki/Category:2015#mediaviewer/File:Happy_New_Year_2015.png)","_id":"AlSZ7DBitz9ABAA5"}
{"slug":"building-desktop-apps-with-node-js-and-web-technologies","title":"Building desktop apps with node.js and web technologies","description":"The node-webkit project makes it possible to write standalone desktop apps with JavaScript, HTML5 and CSS3","published":true,"date":"2014-02-04 22:00","tags":["node.js","webkit","desktop apps"],"abstract":"Native apps with web technologies are not a mobile-only thing anymore. The node-webkit project makes it possible to write standalone desktop apps with JavaScript, HTML5 and CSS3. The coolest thing about this is, that both server side (node.js) and client side (jQuery, AngularJS, etc.) JavaScript libraries can be used.","md":"Native apps with web technologies are not a mobile-only thing anymore. The node-webkit project makes it possible to write standalone desktop apps with JavaScript, HTML5 and CSS3. The coolest thing about this is, that both server side (node.js) and client side (jQuery, AngularJS, etc.) JavaScript libraries can be used.\n\n<img src=\"/static/article-assets/node-webkit-screen.png\"/>\n<p class=\"legal center\">Screenshot of a hello world app created with node-webkit</p>\n\nA few hours ago I found this project called <a href=\"https://github.com/rogerwang/node-webkit\" rel=\"external,nofollow\">node-webkit</a>.\nIt seems to be living and mature enough to use it. But since I don't need it now, I blog about it, so that I can remember it in the appropriate moment.\n\n## How does it work?\n1. Write your application.\n1. Create a zip file of all your assets (call it package.nw).\n1. You can just ship this file along with the node-webkit executable file\n1. Alternatively you can create an executable file from the package with a few dll files along\n1. If you want to have a single executable file, it's recommended to box the files with <a href=\"http://enigmaprotector.com/en/aboutvb.html\" rel=\"external,nofollow\">Enigma Virtual Box</a>\n\n## Attack of the contexts\nThere is a concept which might be a little crazy at first sight. There are different contexts with different global object for node modules and UI windows.\nIn the web context we have a `window` object (or many if we have multiple windows), which we don't have in a node module.\nIf we have to reach the window object of the current UI context, we have to pass it to the node module.\nWe get most of the problem with `instanceof` because the constructors like `Array` or `Date` are children of the context-dependent global object.\nAfter just quickly building a \"hello world\" app I can't really tell to what extent this can be a problem or difficulty.\n\n## Supported platforms\nThere are prebuilt binaries for Windows, OSX and Linux.\n\n**References:**\n\n* For more details and docs take a look at the <a href=\"https://github.com/rogerwang/node-webkit\" rel=\"external,nofollow\">project's Github site</a>.\nThe features are well-documented.\n* <a href=\"http://strongloop.com/strongblog/creating-desktop-applications-with-node-webkit/\" rel=\"external,nofollow\">Creating Desktop Applications With node-webkit </a>\n* <a href=\"http://oldgeeksguide.github.io/presentations/html5devconf2013/wtod.html#/\" rel=\"external,nofollow\">WebApp to DesktopApp with Node-Webkit</a>","_id":"BkWxUyZILYplFCXe"}
{"slug":"plain-javascript-event-delegation","title":"Plain JavaScript event delegation","description":"Event delegation code in vanilla JS without any library. Adding event handler to an outer element while still knowing which inner element was clicked.","published":true,"date":{"$$date":1422230400000},"tags":["javascript","event"],"abstract":"Event delegation is a powerful concept of event handling. If you are using jQuery, you might know it as jQuery.on(). Since I don't use jQuery anymore, I had to write a similar function myself. If you are wondering how the code looks like, read on.","md":"Event delegation is a powerful concept of event handling. If you are using jQuery, you might know it as jQuery.on(). Since I don't use jQuery anymore, I had to write a similar function myself. If you are wondering how the code looks like, read on.\n\n## What is event delegation?\nWith event delegation we only set one event handler function, which then analyzes the event's target element and executes the intended handler function.\nThis way we have better code readability and performance improves.\nThere is no need to set new event handlers when the content dynamically changes.\nThis is very handy for lists or tables.\n\n\nIn jQuery code we could just call\n```JavaScript\njQuery('#list').on('click', '.item', eventHandler)\n```\n\nExample: there is a list with 100 items. We want our eventHandler function to be called whenever a list item is clicked.\n```html\n<ul id=\"list\">\n    <li>1</li>\n    <li>2</li>\n    <li>...</li>\n    <li>100</li>\n</ul>\n<script>\n    var list = document.getElementById('list');\n    list.addEventListener('click', function eventHandler(event) {\n        // one item in the list was clicked\n        console.log(event.target); // this is that item\n        event.target.style.backgroundColor = '#f00';\n    });\n</script>\n```\n\n## This is just event bubbling, isn't it?\nThis first example was not very spectacular. It just uses event bubbling, which is natural in JavaScript.\n\nBut we can go further. What if only some specific elements should trigger our `eventHandler` function?\nThis is also possible. With jQuery the code looks like this:\n```html\n<ul id=\"list\">\n    <li class=\"yes\">1</li>\n    <li class=\"no\">2</li>\n    <li class=\"no\">3</li>\n    <li>...</li>\n    <li class=\"yes\">100</li>\n</ul>\n<script>\n    $('#list').on('click', '.yes', function eventHandler(e) {\n        // this function is only called,\n        // when a list item with 'yes' class is called\n        console.log(e.target); // this is the clicked list item\n    });\n</script>\n```\n\n## What if I don't have jQuery?\nThat's absolutely fine. I don't use jQuery either anymore. Here we have some vanilla JavaScript code:\n```html\n<ul id=\"list\">\n    <li class=\"yes\">1</li>\n    <li class=\"no\">2</li>\n    <li class=\"no\">3</li>\n    <li>...</li>\n    <li class=\"yes\">100</li>\n</ul>\n<script>\n    function on(elSelector, eventName, selector, fn) {\n        var element = document.querySelector(elSelector);\n\n        element.addEventListener(eventName, function(event) {\n            var possibleTargets = element.querySelectorAll(selector);\n            var target = event.target;\n\n            for (var i = 0, l = possibleTargets.length; i < l; i++) {\n                var el = target;\n                var p = possibleTargets[i];\n\n                while(el && el !== element) {\n                    if (el === p) {\n                        return fn.call(p, event);\n                    }\n\n                    el = el.parentNode;\n                }\n            }\n        });\n    }\n\n    on('#list', 'click', '.yes', function(e) {\n        // this function is only called, when a list item with 'yes' class is called\n        console.log(e.target); // this is the clicked list item\n    });\n</script>\n```\n\n## Demo\nClick on any list item. Where it says \"click me!\", the click will trigger an `alert()` message.\n\n<ul id=\"list\">\n    <li class=\"no\">won't work</li>\n    <li class=\"no\">won't work</li>\n    <li class=\"yes\">click me!</li>\n    <li class=\"yes\">click me!</li>\n    <li class=\"no\">won't work</li>\n    <li class=\"yes\">click me!</li>\n    <li class=\"yes\">click me!</li>\n    <li class=\"no\">won't work</li>\n    <li class=\"no\">won't work</li>\n    <li class=\"yes\">click me!</li>\n</ul>\n<script>\n(function() {\n    function on(elSelector, eventName, selector, fn) {\n        var element = document.querySelector(elSelector);\n\n        element.addEventListener(eventName, function(event) {\n            var possibleTargets = element.querySelectorAll(selector);\n            var target = event.target;\n\n            for (var i = 0, l = possibleTargets.length; i < l; i++) {\n                var el = target;\n                var p = possibleTargets[i];\n\n                while(el && el !== element) {\n                    if (el === p) {\n                        return fn.call(p, event);\n                    }\n\n                    el = el.parentNode;\n                }\n            }\n        });\n    }\n\n    on('#list', 'click', 'li.yes', function() {\n        alert('You clicked me!');\n    });\n}());\n</script>\n\n\n## Use-cases\n1. Large tables with many fields\n1. Lists - the content of the parent element can be changed freely (paging), the event listener must be set only once\n1. etc.\n\n\n## Browser Support\nThis code uses two core DOM API call `Element.addEventListener` and `Element.querySelectorAll`. These are supported in every modern browser and IE9+.\n\n\n### More resources on events\n- [Bubbling and Capturing @ javascript.info](http://javascript.info/tutorial/bubbling-and-capturing)\n- [addEventListener @ MDN](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener)\n- [Event Order @ QuirksMode](http://www.quirksmode.org/js/events_order.html)\n- [Events Advanced @ QuirksMode](http://www.quirksmode.org/js/events_advanced.html)\n\n\n**What do you think, would you use this code in your projects? Tell me your thoughts in the comments.**","_id":"CSiziMBHRvPg92Fn"}
{"slug":"defining-properties-in-javascript","title":"Defining properties in JavaScript","description":"JavaScript supports modern properties. Let's take a look at how to define and use them.","published":true,"date":{"$$date":1391904000000},"tags":["javascript"],"abstract":"JavaScript has always supported basic properties on objects. But the time is approaching when IE8 support is not relevant anymore, so we can use a more modern approach (ES5) for defining properties. There is one difference though to other programming languages - like C# - that we always define properties on objects and not on types.","md":"JavaScript has always supported basic properties on objects. But the time is approaching when IE8 support is not relevant anymore, so we can use a more modern approach (ES5) for defining properties. There is one difference though to other programming languages - like C# - that we always define properties on objects and not on types.\n\n## Defining properties on objects with Object.defineProperty()\n```JavaScript\nvar obj = {};\n\nObject.defineProperty(obj, \"myProperty\", {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: 13\n});\n```\nThe first two arguments are very obvious, but the third one is where all the magic happens. This argument is a property descriptor. Let's see what we can do with it.\n\n### Enumerable\nThis attribute simply tells whether the property should show up in enumerations like `for ... in` loops or in `Object.keys()`.\n\nDefaults to `false`.\n\n### Configurable\nThis attribute sets whether the property can be reconfigured at a later point in the code or whether it can be deleted from the object.\n\nDefaults to `false`.\n\n### Writable\nThis attribute sets whether a property is read-only or not.\n\nDefaults to `false` except in Google Chrome.\n\n### Value\nThe value of a property can be anything, any valid JavaScript value (Number, Date, Array, Function, etc.).\n\nDefaults to `undefined`.\n\n## Defining getter and/or setter functions\nIt is also very easy to define getter and setter functions. Let's take a look at the example below:\n```JavaScript\nvar obj = {};\nvar propValue = 100;\nObject.defineProperty(obj, \"prop\", {\n    get: function(){ return propValue; },\n    set: function(newValue){ propValue = newValue; },\n    enumerable : true,\n    configurable : true\n});\n```\n\n## Invalid cases\n```JavaScript\nvar obj = {};\nObject.defineProperty(obj, 'undeletable', { value: 100, configurable: false });\nconsole.log(obj.undeletable); // 100\ndelete obj.undeletable;\nconsole.log(obj.undeletable); // 100\n\nvar obj = {};\nObject.defineProperty(obj, 'notWorking', {\n    value: 100,\n    get: function() { return 300; }\n});\n// TypeError: Invalid property. A property cannot both have accessors and be writable or have a value, #<Object>\n\nvar obj = {};\nObject.defineProperty(obj, 'notWorking', {\n    get: function() { return 300; },\n    writable: true\n});\n// TypeError: Invalid property. A property cannot both have accessors and be writable or have a value, #<Object>\n```\n\n## Defining multiple properties on the same object\n```JavaScript\nvar obj = {};\n\nObject.defineProperties(obj, {\n    \"hello\": {\n        value: \"Hello\",\n        writable: true\n    },\n    \"world\": {\n        value: \"World!\",\n        writable: false\n    }\n});\n```\n\n## Browser support\nGood news, the `Object.defineProperty()` is supported in all modern browsers.\nThe only problematic one is Internet Explorer 8, which only allows to define properties on DOM objects).\n\n## Performance\nAt the moment, using `Object.defineProperty()` is definitely slower than using basic properties like in the old days - but not that much.\nFor more detailed performance tests take a look at <a href=\"http://jsperf.com/object-defineproperty-vs-definegetter-vs-normal\" rel=\"external,nofollow\">jsperf.com</a>.\n\n## Resources:\n* <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"external,nofollow\">Object.defineProperty() on MDN</a>\n* <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\" rel=\"external,nofollow\">Object.defineProperties() on MDN</a>","_id":"D8jfcwzDeoCXnBe7"}
{"slug":"serve-a-practical-command-line-webserver","title":"Serve - a practical command line webserver","description":"A small and practical tool to simply serve static files","published":true,"date":{"$$date":1391040000000},"tags":["tool","webserver","command line"],"abstract":"A few weeks ago I found a very amazing tool - it's called \"serve\".","md":"A few weeks ago I found a very amazing tool - it's called \"serve\".\n\n## What can it do for you?\nJust simply serve you files over `http://` protocol. Besides static files it supports jade templates, stylus and less.\nI usually use it, when I need an ad-hoc web server, like when downloading some sources from github and I want to check out the examples.\nThey sometimes need a 'real web server', because of the limitations of the `file://` protocol.\n\n## How to use it?\nInstall it the usual way with `npm install -g serve` and you should be fine.\nThen just simply `cd` into the directory which you want to be able to access from `http://localhost` and run `serve`.\nDefault port is 3000 but, as many things, it's configurable.\nThat's it.\n\nFor more documentation visit the <a href=\"https://github.com/visionmedia/serve\" rel=\"external,nofollow\">github/serve</a> project page.","_id":"DA36MhFiPeA4Z0HQ"}
{"slug":"comparison-helper-for-handlebars","title":"Comparison helper for Handlebars.js","description":"A useful Handlebars helper to compare to variables almost like in plain JavaScript","published":true,"date":"2014-02-13 23:00","tags":["javascript","templating","handlebars"],"abstract":"Personally, I was always missing some sort of comparison helper in Handlebars.js. I know, I know, it's sort of being against the philosophy of Handlebars - being logicless. But I still wanted to have it.","md":"Personally, I was always missing some sort of comparison helper in Handlebars.js. I know, I know, it's sort of being against the philosophy of Handlebars - being logicless. But I still wanted to have it.\n\n## Comparing two variables almost like in plain JavaScript\nThankfully I found a similar <a href=\"http://stackoverflow.com/a/16315366/2374649\" rel=\"external,nofollow\">question on Stack and a superb answer from a user called Jim</a>.\n\n```JavaScript\nHandlebars.registerHelper('ifCond', function (v1, operator, v2, options) {\n    switch (operator) {\n        case '==':\n            return (v1 == v2) ? options.fn(this) : options.inverse(this);\n        case '===':\n            return (v1 === v2) ? options.fn(this) : options.inverse(this);\n        case '!==':\n            return (v1 !== v2) ? options.fn(this) : options.inverse(this);\n        case '<':\n            return (v1 < v2) ? options.fn(this) : options.inverse(this);\n        case '<=':\n            return (v1 <= v2) ? options.fn(this) : options.inverse(this);\n        case '>':\n            return (v1 > v2) ? options.fn(this) : options.inverse(this);\n        case '>=':\n            return (v1 >= v2) ? options.fn(this) : options.inverse(this);\n        case '&&':\n            return (v1 && v2) ? options.fn(this) : options.inverse(this);\n        case '||':\n            return (v1 || v2) ? options.fn(this) : options.inverse(this);\n        default:\n            return options.inverse(this);\n    }\n});\n```\n\nHere is how one would use it:\n```html\n\\{{#ifCond value \"===\" value2}}\n    Values are equal!\n\\{{else}}\n    Values are different!\n\\{{/ifCond}}\n```\n\n## Update\nAs Eugene Mirotin pointed out, this solution could be much DRYer, so here is an improved variant of the code which does the same thing:\n```JavaScript\n(function() {\n    function checkCondition(v1, operator, v2) {\n        switch(operator) {\n            case '==':\n                return (v1 == v2);\n            case '===':\n                return (v1 === v2);\n            case '!==':\n                return (v1 !== v2);\n            case '<':\n                return (v1 < v2);\n            case '<=':\n                return (v1 <= v2);\n            case '>':\n                return (v1 > v2);\n            case '>=':\n                return (v1 >= v2);\n            case '&&':\n                return (v1 && v2);\n            case '||':\n                return (v1 || v2);\n            default:\n                return false;\n        }\n    }\n\n    Handlebars.registerHelper('ifCond', function (v1, operator, v2, options) {\n        return checkCondition(v1, operator, v2)\n                    ? options.fn(this)\n                    : options.inverse(this);\n    });\n}());\n```","_id":"EXmcPu7KUMOsQyEY"}
{"slug":"video-douglas-crockford-about-the-new-good-parts","title":"Worth watching: Douglas Crockford speaking about the new good parts of JavaScript in 2014","description":"The new good parts and bad parts of modern JavaScript in 2014. ES6, class-free object oriented programming, tail call optimization and many more.","published":true,"date":"2014-10-20 23:00","tags":["video","javascript"],"abstract":"At the Nordic.js 2014 Douglas Crockford was giving a talk about what he considers to be \"the good parts\" of JavaScript in 2014. He talks about ECMAScript6, what parts of it he could already identify as the new good parts, and of which he thinks, that they are going to be the new bad parts. Read on for my summary or just whatch the video.","md":"At the Nordic.js 2014 Douglas Crockford was giving a talk about what he considers to be \"the good parts\" of JavaScript in 2014. He talks about ECMAScript6, what parts of it he could already identify as the new good parts, and of which he thinks, that they are going to be the new bad parts. Read on for my summary or just whatch the video.\n\n<div style=\"padding: 30px 0 56.25%; background-color: #000; position: relative;\"><iframe style=\"position: absolute; width: 100%; height: 100%; top: 0; right: 0; bottom: 0; left: 0;\" src=\"http://www.youtube.com/embed/PSGEjv3Tqo0\"></iframe></div>\n\n## The \"good parts\" he identified in ES6\n\n- ES6's new (proper) [tail call optimization](http://duartes.org/gustavo/blog/post/tail-calls-optimization-es6/).\n  So that \"JavaScript becomes a real functional programming language\".\n- Ellipsis aka rest operator for variable number of function arguments.<br>\n`function x(...params) {}`\n- Modules - to come away from global variables\n- The `let` statement for block scope variables -> \"`let` is the new `var`\"\n- Destructoring `let {a, b} = obj` equals in ES5 `var a = obj.a, b = obj.b;`\n- `WeakMap` which has a terrible name -> nobody wants to use something which is weak, everybody wants strong things\n\n\n## The bad parts\n\nHe admits that all the ES6 things are new and it's hard to decide whether they are going to be good or bad.\nBut there are definitely things, where he feels they are going to be bad.\n- The worst is `class`. It's only for Java programmers, who don't want to learn JavaScript. For those \"Who don't know how miserable they are.\"\n- Generators - which add much complexity but little value\n\n- He also talks about that he changed his mind. There are things, which he considered to be good parts, but they aren't anymore.\n- He stopped using the `new` keyword years ago. He uses `Object.create` instead.\n- But he also stopped using `Object.create` (although it was only added for him to the language).\n- It all only happened, because he stopped using `this`. So he doesn't need those.\n- He also stopped using `null`, because it doesn't make any sense to have two kinds of undefined: `null` and `undefined`.\n- He stopped using falsiness.\n- He doesn't use `for` statements anymore, just the new native array methods or `Object.keys`.\n```JavaScript\nObject.keys(obj).forEach(function(key) { /* ... */ });\n```\n\n\n## He made some thoughts about the next language after JavaScript\n\n- Neither of Dart or TypeScript is the forward looking thing we need.\n- Getting adoption of a new language is going to be extremely difficult, because programmers are as emotional as other people.\nAlso every change needs a decade to get accepted.\n- Getting away from classes is a good thing, but he's not an advocate of prototypal inheritance anymore.\n- He proposes class-free object oriented programming aka using closures when writing objects. Like this:\n```JavaScript\nfunction constructor(spec) {\n    let { member } = spec,\n        { other } = other_constructor(spec),\n        method = function() {\n            // member, other, methid, spec\n        };\n\n    return Object.freeze({\n        method,\n        other\n    });\n}\n```\n- He also proposes a new number type for the next generation programming languages. It's called [DEC64](http://dec64.com/).\nWith this new - one and only - number type he wants to fight against problems like `0.1 + 0.2 != 0.3`. (Binary Floating Points originating from 1950's)\nHe also talks about the two types of requirements, business vs. sceintific - exact cent values vs. approximate values. \n\n\nI think it was a very interesting talk. Douglas Crockford had many interesting points about programming in modern JavaScript.\nThere are some points which are maybe debatable.\nWhat do you think? Do you agree with him? Do you have better ideas? Please share your thoughts in the comments below.","_id":"FMG0n52JhifxP583"}
{"slug":"things-we-can-lear-from-game-developers","title":"Things we can learn from game developers","description":null,"published":false,"date":"2014-11-09 21:00","tags":["game","jankfree"],"abstract":"","md":"\n\nBlah\n\n1. \n1. Performance Budget (60fps rendering)\n1. Data Oriented Design\n    1. Entity Component System\n1. Behavior Tree\n1. Playtesting\n\n\n## Data Oriented Programming\n\nResources:\n* [What is Data-Oriented Game Engine Design?](http://gamedevelopment.tutsplus.com/articles/what-is-data-oriented-game-engine-design--cms-21052)\n* [What is data oriented design? - Stack Overflow](http://stackoverflow.com/a/2021868)\n\n\n## Performance Budget\nToday's websites have a lot of animations, shadows, 3D transformations and other pretty effects.\nRendering all these visual effects need time, because of the many complex calculations behind them.\nAlso GPUs get utilized for this task.\n\nWhat our users need is 60fps rendering, because most consumer monitors are running with 60Hz refresh rate. What does it mean for web developers?\nEach frame must be painted in about 16ms. Maybe a half of this time is needed by the browser to paint.\nThis means that our code must not need more the 7-8ms to render a frame.\n\n\nMore resources:\n* [JankFree](http://jankfree.org/)\n* [Pixels are expensive - Aerotwist](http://aerotwist.com/blog/pixels-are-expensive/)\n* [Making a 60fps Mobile App](http://aerotwist.com/blog/making-a-60fps-mobile-app/)\n\n\n## Playtesting\nCreating new websites (or web applications) is almost like creating new games.\nBoth a game and a website have:\n* user experience\n* some kind of core mechanics which is more or less new to the target audience at first sight\n* if users like it they use it more often or longer\n\nWhen creating a website it is very important for the developer to get feedback from the users.\nWill they understand the concept? Do they find what they want? Where do they look for the features? What do they miss?\nIs a feature obvious for them or do they need some tutorial?\n\n[The Playtesting Bible](http://mentalblockgaming.com/blog/game-design/the-playtesting-bible-a-guide-for-game-developers/) has some very good points about playtesting games.\nAll of these points are absolutely valid for usertesting websites.","_id":"FkvKx4ND7CjX4J1g"}
{"slug":"error-handling-in-javascript","title":"Error handling in JavaScript","description":"The proper way of throwing and handling JavaScript Errors","published":true,"date":{"$$date":1391126400000},"tags":["javascript","browser","error","node.js"],"abstract":"Have you ever wondered, what's the proper way of throwing JavaScript errors? And how to handle them? Here we'll see some examples and we'll define some custom error types.","md":"Have you ever wondered, what's the proper way of throwing JavaScript errors? And how to handle them? Here we'll see some examples and we'll define some custom error types.\n\n*Additional bonus: the following code examples also work in node.js not just in the browsers.*\n\n## Throwing Errors\nThrowing errors is very simple, we just need the `throw` statement.\n```JavaScript\nfunction throwsAnError() {\n    throw new Error('An error occured');\n}\n\ntry {\n    throwsAnError();\n} catch(ex) {\n    console.log(ex.message); // An error occured\n}\n```\n\nTheoretically it's possible to throw any kind of object, but it's not really recommended throwing anything else than `Error` or one of its derived (custom) types.\nThe reason for this is, that browsers not always work as you would expect.\nSome of them (IE, Safari) only show \"uncaught exception\" and don't show the object which was thrown.\n\n## Default error types in JavaScript\nThere are six predefined error types in JavaScript:\n* EvalError: when an error occurs in the `eval()` function\n* RangeError: when a parameter or variable is not in its valid numeric range\n* ReferenceError: when an invalid reference is de-referenced (e.g. using a variable which has not been defined)\n* SyntaxError: when there is a syntax error in some scripts\n* TypeError: when a parameter or variable is not of a valid type\n* URIError: when passing invalid parameters to URI function (`encodeURI()` or `decodeURI()`)\n\n## Handling specific errors\nHere comes the `instanceof` operator handy, when our codes runs into a catch. With its help we can check which type does the exception belong to.\n```JavaScript\ntry {\n    // doSomethingWithNumbersAndURIs();\n} catch (ex) {\n    if (ex instanceof RangeError) {\n        alert('Value not in range!');\n    } else if (ex instanceof URIError) {\n        alert('Value not an URI!');\n    } else {\n        // some basic error handling\n    }\n}\n```\n\n## Throwing custom errors\nThis is also very simple, we just have to create a constructor for our error type which is derived from `Error`.\nThere's one little catch though, line numbers are shown incorrectly.\n```JavaScript\nfunction CustomError(message) {\n  this.name = \"CustomError\";\n  this.message = message || \"Some default message\";\n}\nCustomError.prototype = new Error();\nCustomError.prototype.constructor = CustomError;\n\ntry {\n    throw new CustomError('An error occured!');\n} catch(ex) {\n    console.log(ex.name); // CustomError\n    console.log(ex.message); // Ann error occured!\n}\n```\n\nIf you are interested in more details:\n1. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" rel=\"external,nofollow\">Mozilla Developer Network Documentation</a>\n1. <a href=\"http://www.nczonline.net/blog/2009/03/10/the-art-of-throwing-javascript-errors-part-2/\" rel=\"external,nofollow\">NCZOnline</a>","_id":"HvohVeV2GxZPvvl4"}
{"slug":"developing-single-page-apps-with-mithril","title":"Developing  single page apps with Mithril","description":"Mithril is a small but very powerful client side MVC framework for developing single page apps. It has support for data binding, modules and routing.","published":false,"date":{"$$date":1397260800000},"tags":["javascript","framework","client side","single page app","dom based templating"],"abstract":"Mithril is a very small client side MVC framework with support for data-binding and routing. It uses its own view rendering engine - a DOM based templating engine. It is fast as lightning. Although this framework is modern, it also has an outstanding browser support, including IE 6 and 7.","md":"Mithril is a very small client side MVC framework with support for data-binding and routing. It uses its own view rendering engine - a DOM based templating engine. It is fast as lightning. Although this framework is modern, it also has an outstanding browser support, including IE 6 and 7.\n\n## Demo\n<iframe src=\"/static/article-assets/mithril-example.html\" style=\"min-height: 350px;\"></iframe>","_id":"Iuq9YhAo5jhIzrJk"}
{"slug":"finding-a-random-document-in-mongodb","title":"Finding a random document in MongoDB (with benchmarks)","description":"Some tricks for retrieving a random element from a collection using MongoDB - with benchmarks.","published":true,"date":"2014-02-15 23:00","tags":["mongodb","random"],"abstract":"Finding a random element is not a trivial task when using MongoDB - especially when performance is crutial.","md":"Finding a random element is not a trivial task when using MongoDB - especially when performance is crutial.\n\n## Finding one random document - Method 1\n1. First of all you have to count how many documents you have in the collection.\n   Optionally you can provide a filter condition (query).\n\n   `N = db.myCollection.count(query)`\n\n1. Then you have to generate a random number which is less than the number you counted before.\n\n   `R = Math.floor(Math.random() * N)`\n\n1. Then skip that many records and retrieve the next one.\n   If you provided a query at the first step, here you have to use it as well.\n\n   `db.collection.find(query).limit(1).skip(R))`\n\n### Let's see an example\n```JavaScript\nvar query = { state: 'OK' };\nvar n = db.myCollection.count(query);\nvar r = Math.floor(Math.random() * n);\nvar randomElement = db.myCollection.find(query).limit(1).skip(r);\n```\n\n### Pro:\nThe data can be intact, no preparation is needed.\n\n### Con:\n* This one is the slowest method.\nBut this approach may still be OK, depending on the case. It definitely has tradeoffs when the collection has a large amount of documents:\nThe `skip` command has to scan at least `R` number of documents.\nIf the number of documents retrieved by the query is large, the random number `R` is also going to be large.\n\n\n## Finding one random document - Method 2\nFor this method to work, the data has too meet some constraints:\n* Each document should have a field with a random number, e.g. when saving `db.myCollection.save({ name: 'name', ..., rnd: Math.random() })`\n* The collection should have an index on this field, e.g. `db.myCollection.ensureIndex({ rnd: 1 })`\n\nWhen the data is all set up, querying is rather easy:\n```JavaScript\nvar query = {\n    state: 'OK',\n    rnd: {\n        $gte: Math.random()\n    }\n};\n\nvar randomElement = db.myCollection.findOne({ $query: query, $orderby: { rnd: 1 } });\n```\n\n### Pro:\n* Not having to skip any document.\n\n### Con:\n* Data has to have field with a random number stored in it\n* This random field should also have an index\n* Sorting reduces performance\n\n\n## Finding one random document - Method 2.5\nThere is a simpler variant of the second method. It doesn't retrieve a truly random document, but it may be enough for the specific case.\n```JavaScript\nvar query = {\n    state: 'OK',\n    rnd: {\n        $gte: Math.random()\n    }\n};\n\nvar randomElement = db.myCollection.findOne(query);\n```\nPlease note that there is no `$orderby`. This can improve performance. The price is that documents are sorted in \"find order\" rather than \"random order\".\nBut this could be fine in many cases.\n\n### Pro:\n* Not having to skip any document\n* Performance\n\n### Con:\n* Not truly random document\n* Data has to have a field with a random number stored in it\n* This field also should have an index\n\n\n## Benchmarks\nI created a very simple benchmark. The setup looks like this:\n```JavaScript\nvar i = 1000000;\nwhile(i) {\n    db.test.save({\n        name: \"some lorem ipsum not important\",\n        rnd: Math.random()\n    });\n    i--;\n}\ndb.test.ensureIndex({ rnd: 1 });\n```\n\nThen I ran all the three methods on my computer with a local database, 10000 times each.\n\n```JavaScript\nvar startDate = new Date();\nvar i = 10000;\nwhile (i) {\n\tvar n = db.test.count();\n\tvar r = Math.floor(Math.random() * n);\n\tvar randomElement = db.test.find().limit(1).skip(r);\n\ti--;\n}\nvar t1 = new Date() - startDate;\n\n\nvar startDate = new Date();\nvar i = 10000;\nwhile (i) {\n\tvar query = {\n\t    rnd: {\n\t        $gte: Math.random()\n\t    }\n\t};\n\n\tvar randomElement = db.myCollection.findOne({ $query: query, $orderby: { rnd: 1 } });\n\ti--;\n}\nvar t2 = new Date() - startDate;\n\n\nvar startDate = new Date();\nvar i = 10000;\nwhile (i) {\n\tvar query = {\n\t    rnd: {\n\t        $gte: Math.random()\n\t    }\n\t};\n\n\tvar randomElement = db.myCollection.findOne(query);\n\ti--;\n}\nvar t3 = new Date() - startDate;\n\n\nprint(t1, t2, t3);\n```\n\n## And the winner is \"Method 2.5\"\nHere are my benchmark results:\n\n|Method         | Time for 10,000 runs (seconds)|\n|:--------------|----------------------------:|\n| Method 2.5    |                       2.234 |\n| Method 2      |                       2.297 |\n| Method 1      |                       2.813 |\n\nAlthough the differences are not quite big, the winner is definitely \"Method 2.5\".\nI think, when using more realistic data, the differences are also going to be much larger.\n\nDo you have your own benchmark results with different data? Please feel free to comment it.","_id":"MY0qZOz8ibRD8NrP"}
{"slug":"logging-javascript-errors","title":"Logging JavaScript errors with Google Analytics and","description":null,"published":false,"date":{"$$date":1399161600000},"tags":["javascript","error handling","google analytics"],"abstract":"","md":"\n\n## How to notice when a JavaScript error occurs\n\n```JavaScript\nwindow.addEventListener('error', function(){\n});\n```","_id":"MmJfVGHhxQiJEFxi"}
{"slug":"a-simple-pubsub-module-in-javascript","title":"A simple PubSub module in JavaScript","published":true,"date":{"$$date":1388707200000},"tags":["javascript","modules"],"abstract":"I have always been a fan of simple things, such as the PubSub pattern. A few weeks ago I discovered this pattern again, when I was looking for a way to separate some JavaScript modules which don't really have to know about each other but have to have some sort of communication.","md":"I have always been a fan of simple things, such as the PubSub pattern. A few weeks ago I discovered this pattern again, when I was looking for a way to separate some JavaScript modules which don't really have to know about each other but have to have some sort of communication.\n\n##TLDR\nI believe that publish/subscribe (PubSub) is a very powerfull pattern. Therefore I have recently open sourced my implementation of it in JavaScript. The full source code can be found on GitHub: <a href=\"https://github.com/bdadam/PubSub\" rel=\"external,nofollow\">github.com/bdadam/PubSub</a>.\nIt's completely dependency-free and very small (under 1kb).\n\n## What is PubSub?\n>In software architecture, publish–subscribe is a messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers. Instead, published messages are characterized into classes, without knowledge of what, if any, subscribers there may be. Similarly, subscribers express interest in one or more classes, and only receive messages that are of interest, without knowledge of what, if any, publishers there are.\nPub/sub is a sibling of the message queue paradigm, and is typically one part of a larger message-oriented middleware system.\n<small>Source: [Wikipedia](http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern)</small>\n\n## Differences between DOM events and PubSub\nPubSub is very similar to the DOM events, except: there is only one object which fires events and accepts listeners.\nWhen using DOM events, a listener is registered on the DOM node which fires the event.\n<pre class=\"prettyprint lang-js\"><code>document.getElementById('someId').addEventListener('click', function() { /* event listener */ });\n</code></pre>\n\nIn a *PubSub* architecture a publisher doesn't know its subscribers and a message receiver doesn't know where the message comes from. Both parties only know a mediator object which handles the broadcasting of the messages.\n\n<pre class=\"prettyprint lang-js\"><code>// PubSub is the global mediator object\n\nPubSub.subscribe('anEvent', function(eventName, eventData) {\n    console.log(eventName); // \"anEvent\"\n    console.log(eventData.something); // 1\n    console.log(eventData.someOtherThing); // 2\n});\n\nPubSub.publish('anEvent', { something: 1, someOtherThing: 2 });\n</code></pre>\n\n## The power of PubSub\nThis pattern allows us to decouple modules from each other. E.g. think of an online shop, where users can add products to their carts. When adding a product, the website usually has to do some things:\n\n+ update number of items\n+ update total price\n+ do some tracking (e.g. Google Analytics)\n+ highlight the newly added product\n+ maybe play a small animation or even some sound effect (don't do it)\n+ etc.\n\nIf a customer clicks on the \"Add to cart\" button, the button sends a message with the corresponding product as a payload. All the other components can listen to this event and act accordingly (update shopping cart, play animation, track it in Google Analytics and so on).\n\n##Are there any disadvantages?\nYes, there are indeed. All the disadvantages come from the main advantage: publishers are decoupled from subscribers. This means:\n1. There is no guarantee that a message is delivered. PubSub is a fire and forget pattern.\n2. The publisher doesn't know, when a subscriber stops working.\n\n## What does all this look like in JavaScript code?\n\n<pre class=\"prettyprint lang-js\"><code >// What the button does\n$(\"#addProductButton\").click(function() {\n    PubSub.publish(\"productAdded\", {\n        product: {\n            id: 1234,\n            name: 'A Super Product',\n            price: 9900 // in cents\n        },\n        user: {\n            country: \"DE\",\n            loggedIn: true,\n            membershipStatus: \"premium\"\n        }\n    });\n});\n\n// Total price module increases the displayed total price when a product is added\nPubSub.subscribe('productAdded', function(eventData) {\n    increaseTotalPrice(eventData.product.price);\n});\n\n// Play the sound when Mario collects a coin\nPubSub.subscribe('productAdded', function() {\n    playSound('mario-coin');\n});\n\n// Tracking module\nPubSub.subscribe('productAdded', function(eventData) {\n    _gaq.push([\n        '_trackEvent',\n        'Products',\n        'Buy',\n        eventData.product.name,\n        eventData.product.price\n    ]);\n});\n</code></pre>\n\n## How to install it?\nIf you use bower, just execute <code>bower install pubsub</code> and then include pubsub.min.js in your code. E.g:  <code>&lt;script src=\"/bower_components/pubsub/pubsub.min.js\"&gt;&lt;/script&gt;</code>\n\nIf you don't use bower then you can download [pubsub.min.js](https://raw.github.com/bdadam/PubSub/master/pubsub.min.js) and include it. E.g.:\n`<script src=\"/libs/pubsub/pubsub.min.js\"></script>`\n\nYou can also use it with require-js:\n```javascript\nrequire(['pubsub'], function(PubSub) {\n    console.log(typeof PubSub.publish); // \"function\"\n    console.log(typeof PubSub.subscribe); // \"function\"\n    console.log(typeof PubSub.unsubscribe); // \"function\"\n\n    /* Please note: when using require js, the PubSub module doesn't register itself as a global object */\n    console.log(typeof window.PubSub); // \"undefined\"\n});\n```\n\nI think I am not the only one, who loves the simplicity and elegance of PubSub. If you do it as well, please consider using my implementation.\nIt's free and it's published under the MIT license.","_id":"ODAx8A214Hwl0zT7"}
{"slug":"one-more-reason-to-check-for-strict-equality-in-javascript","title":"One more reason to check for strict equality in JavaScript","description":"There are some things in JavaScript which seem to be strange, like 3 == [3] or 3 == [[[3]]]","published":true,"date":"2014-02-12 23:00","tags":["javascript","fun"],"abstract":"","md":"\n\nSome JavaScript fun without further explanation.\n```JavaScript\nvar a = [0, 1, 2, 3, 4, 5, 6];\nconsole.log(a[3]); // 3\nconsole.log(a[[3]]); // 3\nconsole.log(a[[[3]]]); // 3\nconsole.log(a[[[[3]]]]); // 3\nconsole.log(a[[[[[3]]]]]); // 3\nconsole.log(a[\"3\"]); // 3\n\nconsole.log(3 == [3]); // true\nconsole.log(3 == [[3]]); // true\n\nconsole.log(3 === [[3]]); // false\n\n3 === Number([3].valueOf().toString()) // true\nconsole.log([3].valueOf()) // [3]\nconsole.log([3].valueOf().toString()) // 3\nconsole.log(Number(\"3\")) // 3\n// therefore:\n3 === Number([3].valueOf().toString()) // true\n```\n\nResources - questions on Stack Overflow:\n* <a href=\"http://stackoverflow.com/questions/1995113/strangest-language-feature/2008728#2008728\" rel=\"external,nofollow\">Strangest language feature</a>\n* <a href=\"http://stackoverflow.com/a/1724551\" rel=\"external,nofollow\">Why does 2 == [2] in JavaScript?</a>","_id":"P9BKh1uTLMngD6VJ"}
{"slug":"better-webfont-loading-with-localstorage-and-woff2","title":"Better webfont loading with using localStorage and providing WOFF2 support","description":"Followup article on web font loading. This time with WOFF2 support, better inline JavaScript taking care of disabled localStorage.","published":true,"date":"2014-12-18 01:30","tags":["webfonts","perfmatters","localStorage","loading"],"abstract":"In my previous [article about webfont loading](/blog/loading-webfonts-with-high-performance.html) I showed a technique about how to load webfonts without blocking page rendering and without annoying the users with flickering text on all pageloads. This time I show you an optimized version of the script and provide a solution for WOFF2 support for the newest browsers.","md":"In my previous [article about webfont loading](/blog/loading-webfonts-with-high-performance.html) I showed a technique about how to load webfonts without blocking page rendering and without annoying the users with flickering text on all pageloads. This time I show you an optimized version of the script and provide a solution for WOFF2 support for the newest browsers.\n\n## Expectations\n1. The users must see the text as soon as possible.\n1. As longs as the font is loading, the text must be rendered with the fallback font so that users can see and read it.\n1. Users shouldn't be annoyed with flickering text on each page load.\n1. Modern browsers with WOFF2 support should receive the fonts in WOFF2 format. This means ca. 30% less filesize.\n\n\n## How to do this?\n- Loading fonts as CSS asynchronously solves expectaions 1 and 2. But unfortunately it causes flickering on every pageload.\n  The browsers already have rendered the text in the fallback font when they finish loading the webfont. So they replace the texts and this causes some flashing.\n\n- The idea is to only load a font from the server once. Then we store the data into the localStorage.\n  On subsequent requests we load the font directly from `localStorage`. This eliminates the flashing on subsequent page loads.\n  Only the first load is affected by the flashing. So no. 3 is also solved now.\n\n- It is quite hard to detect WOFF2 support in the browser if we don't want to rely on user agent detection.\n  The best I could find is a very [clever script](https://github.com/filamentgroup/woff2-feature-test) from Filament Group which uses the font loading API.\n  It's not 100% correct, but it doesn't provide false positives, only false negatives which is really acceptable in this case.\n\n\n## Overview of the script\n1. We let the old browsers stop early. Testing for `window.addEventListener` or some knows user agents (older Android stock browser, Opera Mini, etc.) is good enough.\n1. In some cases `localStorage` can be unreachable, although the browser supports WOFF fonts. For theses cases I provide some fallback.\n1. Then we check whether the font is already stored in localStorage. If it is, we load it immediately.\n1. If it hasn't been loaded before, we load it with an AJAX call. But first we check for WOFF2 support.\n1. Then we store the data into `localStorage` and load the css text into a style element.\n\n\n## Lets take a look at the script\n```JavaScript\n//This script must be placed in the HEAD above all external stylesheet declarations (link[rel=stylesheet])\nfunction loadFont(fontName, woffUrl, woff2Url) {\n    // 0. Many unsupported browsers should stop here\n    var nua = navigator.userAgent;\n    var noSupport = !window.addEventListener // IE8 and below\n            || (nua.match(/(Android (2|3|4.0|4.1|4.2|4.3))|(Opera (Mini|Mobi))/) && !nua.match(/Chrome/)) // Android Stock Browser below 4.4 and Opera Mini\n\n    if (noSupport) { return; }\n\n    // 1. Setting up localStorage\n    var loSto = {};\n    try {\n        // We set up a proxy variable to help with localStorage, e.g. when cookies are disabled\n        // and the browser prevents us accessing it.\n        // Otherwise some exceptions can be thrown which completely prevent font loading.\n        loSto = localStorage || {};\n    } catch(ex) {}\n\n    var localStoragePrefix = 'x-font-' + fontName;\n    var localStorageUrlKey = localStoragePrefix + 'url';\n    var localStorageCssKey = localStoragePrefix + 'css';\n    var storedFontUrl = loSto[localStorageUrlKey];\n    var storedFontCss = loSto[localStorageCssKey];\n\n\n    // 2. Setting up the <style> element, that we are using to apply the base64 encoded font data\n    var styleElement = document.createElement('style');\n    styleElement.rel = 'stylesheet';\n    document.head.appendChild(styleElement);\n    // Setting styleElement.textContent must be after this line, because of IE9 errors\n\n\n    // 3. Checking whether the font data is already in localStorage and up-to-date\n    if (storedFontCss && (storedFontUrl === woffUrl || storedFontUrl === woff2Url)) {\n        // the css is still in the localStorage\n        // AND it was loaded from one of the current URLs\n        \n        // 4. Applying the font style sheet\n        styleElement.textContent = storedFontCss;\n    } else {\n        // The data was not present, or loaded from an obsolete URL\n        // So we have to load it again\n\n        // 5. Checking for WOFF2 support to know which URL we should use\n        var url = (woff2Url && supportsWoff2())\n            ? woff2Url // WOFF2 URL provided and supported\n            : woffUrl; // only WOFF support\n\n\n        // 6. Fetching the font data from the server\n        var request = new XMLHttpRequest();\n        request.open('GET', url);\n        request.onload = function() {\n            if (request.status >= 200 && request.status < 400) {\n                \n                // 7. Updating localStorage with the fresh data and applying the font data\n                loSto[localStorageUrlKey] = url;\n                loSto[localStorageCssKey] = styleElement.textContent = request.responseText;\n            }\n        };\n        request.send();\n    }\n\n    function supportsWoff2() {\n        // Source: https://github.com/filamentgroup/woff2-feature-test\n        if (!window.FontFace) {\n            return false;\n        }\n\n        var f = new FontFace('t', 'url(\"data:application/font-woff2,\") format(\"woff2\")', {});\n        f.load();\n\n        return f.status === 'loading';\n    }\n}\n```\nThe full script and some Grunt tasks for minification are available on [Github/bdadam/OptimizedWebfontLoading](https://github.com/bdadam/OptimizedWebfontLoading).\nThere are also some demo files.\n\n\n## Where to put the script?\nThe script has to be in the HEAD of your page above all stylesheet declarations (link[rel=stylesheet])\nso that it doesn't block page rendering (the browser doesn't have to wait for the CSSOM to be ready).\n\n\n## What happens when `localStorage` is not available?\nThis mostly happens when cookies are disabled or the website is loaded inside a WebView container in a native app.\nIn this case the code still works and falls back to normal browser caching.\nThe CSS file is requested on each pageload, but served from the browser cache - as long as the CSS file is served with proper caching headers.\n\n\n## Fallback font\nI thinkt it is enough to only provide webfonts for those browsers which support the WOFF or WOFF2 format.\nThis means ca. 90% of the users world wide. Other browsers should get the text rendered in a fallback font.\n\nThe users with these older browsers are going to be thankful, because we don't waste their limited resources (CPU, memory) on some fancy stuff.\n\n\n## Demo\nAlthough the technique shown in this article is at the moment my preferred way of loading webfonts, for comparision I provide two more techniques.\n\n1. [Loading webfonts as CSS (async), then storing into `localStorage` for subsequent pageloads requests](/samples/webfonts2/localStorage.html)\n1. [Loading webfonts as CSS (async), but not using localStorage](/samples/webfonts2/asynccss.html)\n1. [Loading webfonts from external woff and woff2 files](/samples/webfonts2/external-fonts.html)\n\n\n## Comparision\nI ran some tests on [webpagetest.org](http://webpagetest.org/) with 3G connection.\n\nThe first visit was basically the same for both the localStorage and the async CSS solution.\nThey both first rendered the text in the fallback font, and then switched over to the webfont. Causing blinking once.\nLoading the fonts from external files lead to invisible text until the fonts were loaded. This deleayed rendering with 0.6 seconds.\n\nNo. 1 and 2 in the lead.\n\nThe second visit comparision also shows some differences between localStorage and async CSS.\nWe can clearly see, that loading from localStorage doesn't cause any rerendering. Once the HTML is downloaded, the page is rendered immediately.\n\nThe async CSS way renders the page in the default font and then rerenders it with the webfont. This causes flickering for the user on every pageload.\n\nNo. 1 is the winner in this regard.\n\n\nTo illustrate the differences here are some filmstrip views:\n\n<img src=\"/static/article-assets/webfonts2/filmstrip-localStorage.jpg\" style=\"display: block;\" alt=\"Comparision of different webfont loading techniques. The localStorage way. (repeat view)\">\n<small>Async CSS loading, using localStorage. No re-rendering.</small><br><br>\n\n<img src=\"/static/article-assets/webfonts2/filmstrip-async-css.jpg\" style=\"display: block;\" alt=\"Comparision of different webfont loading techniques. The async loaded CSS way. (repeat view)\">\n<small>Async CSS loading, without localStorage. Re-rendering visible.</small><br><br>\n\n<img src=\"/static/article-assets/webfonts2/filmstrip-external-font.jpg\" style=\"display: block;\" alt=\"Comparision of different webfont loading techniques. Externally loaded fonts. (repeat view)\">\n<small>Loading fonts externally. Rendering delayed until fonts are loaded.</small><br><br>\n\n### Resources\n* [My prevoius article about webfont loading on responsive sites](/blog/loading-webfonts-with-high-performance.html)\n* [Woff2 feature test by Filament Group](https://github.com/filamentgroup/woff2-feature-test)\n* [WOFF2 support @ caniuse.com](http://caniuse.com/#feat=woff2)\n* [Font loading support @ caniuse.com](http://caniuse.com/#search=FontFace)\n* [Web Fonts Performance: Making Pretty, Fast - By Ilya Grigorik](https://www.igvita.com/2012/09/12/web-fonts-performance-making-pretty-fast/)\n* [Improving Smashing Magazine’s Performance: A Case Study](http://www.smashingmagazine.com/2014/09/08/improving-smashing-magazine-performance-case-study/)\n* [How we make RWD sites load fast as heck](http://www.filamentgroup.com/lab/performance-rwd.html)\n\n\nWhat do you think of this technique? Do you have some ideas to improve it? Please leave a comment.\n\n## Update\nAs @CrocoDillon recommended,\nI added the third (optional) argument to <br>`new FontFace(..., ..., {})` when checking for WOFF2 support.\nOtherwise some browsers throw an exception (Chrome 35 and 36, Opera 22 and 23).\nTake a closer look at the [pull request](https://github.com/filamentgroup/woff2-feature-test/pull/3).","_id":"S1jIEy2uajOEP9n8"}
{"slug":"hosting-static-web-pages-and-assets-with-google-drive","title":"Hosting static web pages and assets with Google Drive","description":"Google Drive officially supports hosting static content with hotlinking capabilities","published":true,"date":"2014-02-02 14:10","tags":["google drive","hosting"],"abstract":"Have you ever needed to quickly deploy a website somewhere? Maybe to show a client some demo content? Or to show a buddy your newest static web app? Here's the solution.","md":"Have you ever needed to quickly deploy a website somewhere? Maybe to show a client some demo content? Or to show a buddy your newest static web app? Here's the solution.\n\nGoogle Drive officially supports hosting static files (like web pages and their assets).\nAccording to a discussion on Stack Exchange it doesn't violate the TOC when hotlinking these resources (free CDN?).\n\n## Here is what to do:\n1. Create a new folder in Google Drive\n1. Change its visibility options to: \"Public on the web\"\n1. Upload your files (html, css, js, images, swf, etc.)\n1. It's recommended to place an index.html file into the folder, which will be the default document in the directory\n1. Grab the URL of your folder (currently shown on the right under \"HOSTING\" when you select your newly created folder)\n1. There you go, just enter this URL into the browser. It should be something like `https://googledrive.com/host/12345678901234567890abcd/`\n1. You should be able to reference files directly inside that folder, e.g. `https://googledrive.com/host/12345678901234567890abcd/css/main.min.css`\n\n\n*Please note that this method is really meant to host static files. There is no support for backend code.*\n\n###Resources\n* <a href=\"https://support.google.com/drive/answer/2881970?hl=en\" rel=\"external,nofollow\">Official Google Drive documentation (little bit obsolete)</a>\n* <a href=\"http://webapps.stackexchange.com/questions/27142/google-drive-image-hotlinking\" rel=\"external,nofollow\">Stack Exchange discussion</a>","_id":"SM6h4M6FgzWix1aG"}
{"slug":"generating-sound-effects-with-client-side-javascript","title":"Generating sound effects with client side JavaScript","description":"The easy way to generate simple 8-bit sound effects for games and apps in JavaScript","published":true,"date":{"$$date":1396742400000},"tags":["javascript","sound","client side"],"abstract":"A few years ago I came across a simple library with which we can easily generate 8-bit sound effects for JavaScript games and apps. This library is very handy for hackathons or weekend coding sessions.","md":"A few years ago I came across a simple library with which we can easily generate 8-bit sound effects for JavaScript games and apps. This library is very handy for hackathons or weekend coding sessions.\n\nThis small library is called [jsfx](https://github.com/egonelbre/jsfx). Info on usage and a demo site can be found on its GitHub page.\n\n## How does it work?\nThis lib generates wave files as data URIs and then feeds them to an &lt;audio&gt; element.\n\n## Demo\nJust click on the buttons to play the corresponding sound effects.\n\n<button id=\"btnPickup\">Pick up a coin</button>\n<button id=\"btnLaser\">Laser</button>\n<button id=\"btnJump\">Jump</button>\n<button id=\"btnShoot\">Shoot</button>\n\n<script src=\"/static/article-assets/jsfx/audio.js\"></script>\n<script src=\"/static/article-assets/jsfx/jsfx.js\"></script>\n<script src=\"/static/article-assets/jsfx/jsfxlib.js\"></script>\n<script>\n    (function load() {\n        if (!window.jsfxlib) {\n            return setTimeout(load, 100);\n        }\n\n        try {\n            function setup(id, params) {\n                var wave = jsfxlib.createWave(params);\n                document.getElementById(id).addEventListener('click', function() {\n                    wave.play();\n                });\n            }\n\n            setup('btnPickup', [\"square\",0.0000,0.4000,0.0000,0.0140,0.3900,0.3420,20.0000,1371.0000,2400.0000,0.0000,0.0000,0.0000,0.0100,0.0003,0.0000,0.3380,0.1920,0.0000,0.0000,0.0000,0.0000,0.0000,1.0000,0.0000,0.0000,0.0000,0.0000]);\n            setup('btnJump', [\"square\",0.0000,0.4000,0.0000,0.3680,0.0000,0.1460,20.0000,454.0000,2400.0000,0.3840,0.0000,0.0000,0.0100,0.0003,0.0000,0.0000,0.0000,0.2210,0.0000,0.0000,0.0000,0.0000,1.0000,0.0000,0.0000,0.0000,0.0000]);\n            setup('btnShoot', [\"saw\",0.0000,0.4000,0.0000,0.2040,0.0000,0.3180,20.0000,951.0000,2400.0000,-0.5880,0.0000,0.0000,0.0100,0.0003,0.0000,0.0000,0.0000,0.3440,0.1860,0.0000,0.1540,0.0100,1.0000,0.0000,0.0000,0.0390,0.0000]);\n            setup('btnLaser', [\"square\",0.0000,0.4000,0.0000,0.2100,0.0000,0.1840,20.0000,1180.0000,2400.0000,-0.5180,0.0000,0.0000,0.0100,0.0003,0.0000,0.0000,0.0000,0.4990,-0.2120,0.0000,0.0000,0.0000,1.0000,0.0000,0.0000,0.1340,0.0000]);\n        }\n        catch(ex) {\n            setTimeout(load, 100);\n        }\n    }());\n</script>","_id":"SNUFE2xFyzY1MeyF"}
{"slug":"panning-and-scrolling-background-images-using-the-canvas-element","title":"Panning and scrolling background images using the canvas element","description":"Animated background for canvas based games","published":true,"date":"2014-03-01 18:00","tags":["javascript","canvas","tutorial"],"abstract":"I'm planning to create a simple 2D game in plain JavaScript. As the first step I would like to show, how to animate (pan or scroll) a background image using the canvas element. I am also going to show some basic setup code in order to have a loop where we can draw the frames.","md":"I'm planning to create a simple 2D game in plain JavaScript. As the first step I would like to show, how to animate (pan or scroll) a background image using the canvas element. I am also going to show some basic setup code in order to have a loop where we can draw the frames.\n\nThere are two common scenarios for simple 2D games:\n* There is a huge background image for the entire level. All the activities have this same background image, but the viewport's position is chaging\n* There is a small image which is scrolled all the time (tipically from right to left) as the player advances\n\n\n## Panning the viewport inside the background image\n<iframe src=\"/figures/panning-background.html\" style=\"width: 100%; height: 230px;\"></iframe>\n\n## Demo\nPlease click on the button to start the animation.\n<iframe src=\"/samples/canvas-background-panning.html\" style=\"width: 100%; height: 370px; border: none;\"></iframe>\n\n## How it works\nWe have a function which is called for every frame our game draws.\nIn this method we calculate the position of the viewport. For this basic example I chose to derive the position from the elapsed time.\nTherefore the camera takes an elliptical path.\n\n```JavaScript\nfunction draw(delta) {\n    totalSeconds += delta;\n    var x = -1 * (img.width - canvas.width) / 2 * (1 + Math.cos(totalSeconds / Math.PI));\n    var y = -1 * (img.height - canvas.height) / 2 * (1 + -Math.sin(totalSeconds / Math.PI));\n\n    context.drawImage(img, x, y);\n}\n```\n\n## Scrolling the background image infinitely\nIn the second case the background image is scrolling infinitely as time and the player advances.\nIt's like when playing Mario, but the camera is centered on Mario the whole time.\n\n<iframe src=\"/figures/scrolling-background.html\" style=\"width: 100%; height: 180px;\"></iframe>\n\nIn the animation above we can see, that for this effect we need at least 2 images (can be the same) or more, depending on the viewport size.\n\n## Demo\nPlease click on the button to start the animation.\nThe vertical black lines mean the edges of the single images.\nFor this example I'm using the same image and we have a constant speed of 100 pixels/sec.\n<iframe src=\"/samples/canvas-background-scrolling.html\" style=\"width: 100%; height: 370px; border: none;\"></iframe>\n\n## How it works\nThe background position is also derived from the elapsed time (constant speed).\n1. We calculate how many images are needed to cover the viewport: `Math.ceil(canvas.width / img.width) + 1`\n2. We calculate the current X-position: `totalSeconds * vx % img.width`. Please note the modulo operator here.\n3. We store the current context state and translate our canvas to make the drawing easier.\n4. We draw the images - one after the other.\n5. We restore the context's state.\n```JavaScript\nfunction draw(delta) {\n    totalSeconds += delta;\n\n    var vx = 100; // the background scrolls with a speed of 100 pixels/sec\n    var numImages = Math.ceil(canvas.width / img.width) + 1;\n    var xpos = totalSeconds * vx % img.width;\n\n    context.save();\n    context.translate(-xpos, 0);\n    for (var i = 0; i < numImages; i++) {\n        context.drawImage(img, i * img.width, 0);\n    }\n    context.restore();\n}\n```\n\n## All the code which calls our `draw()` function\nIn order for this to work, we have some more work to do. This is the setup code I used for these examples.\n1. I used some basic `requestAnimationFrame` polyfill\n1. The animation gets only started after the image is loaded successfully (onload).\n1. Some start/stop logic and button\n1. And the `loop()` function which gets called in every frame when our animation is running. Here we need `requestAnimationFrame()`.\n\n```JavaScript\n(function() {\n    window.requestAnimationFrame = window.requestAnimationFrame\n            || window.webkitRequestAnimationFrame\n            || window.mozRequestAnimationFrame\n            || function(callback) { window.setTimeout(callback, 1000 / 60); };\n\n    var canvas = document.getElementById('bg');\n    var context = canvas.getContext('2d');\n    var looping = false;\n    var totalSeconds = 0;\n\n    var img = new Image();\n    img.onload = imageLoaded;\n    img.src = 'IMG_SOURCE';\n\n    function imageLoaded() {\n        draw(0);\n\n        var btn = document.getElementById('btnStart');\n        btn.addEventListener('click', function() {\n            startStop();\n        });\n    }\n\n    var lastFrameTime = 0;\n\n    function startStop() {\n        looping = !looping;\n\n        if (looping) {\n            lastFrameTime = Date.now();\n            requestAnimationFrame(loop);\n        }\n    }\n\n    function loop() {\n        if (!looping) {\n            return;\n        }\n\n        requestAnimationFrame(loop);\n\n        var now = Date.now();\n        var deltaSeconds = (now - lastFrameTime) / 1000;\n        lastFrameTime = now;\n        draw(deltaSeconds);\n    }\n\n\n    function draw(delta) {\n        /* Here happens some magic. */\n    }\n}());\n```\n\n**In order to see the full source code, please view these pages**\n1. <a href=\"/samples/canvas-background-panning.html\" rel=\"noindex,nofollow\" target=\"_blank\">Panning the viewport inside the background image</a>\n2. <a href=\"/samples/canvas-background-scrolling.html\" rel=\"noindex,nofollow\" target=\"_blank\">Scrolling the background image</a>","_id":"Uj00LPWL69k6s3il"}
{"slug":"strange-error-when-installing-npm-package-globally-on-ubuntu","title":"Strange error when installing npm package globally on Ubuntu","description":"I ran into some problems when I tried to install the pm2 package globally on Ubuntu. Using the unsafe-perm flag solved the problem.","published":true,"date":"2014-02-10 23:00","tags":["npm","ubuntu","node.js"],"abstract":"Installing modules globally has never been a problem for me, neither on Windows nor on Ubuntu. At least until today, when I ran into a somewhat strange problem.","md":"Installing modules globally has never been a problem for me, neither on Windows nor on Ubuntu. At least until today, when I ran into a somewhat strange problem.\n\nI tried to install the pm2 package on an Ubuntu 12.04 Server (`sudo npm install -g pm2@latest`),\nbut the package just didn't want to install correctly.\nI kept getting gyp error messages and this one: \"OSError: [Errno 13] Permission denied\".\nI thought it was impossible to get this error since I was running the install command as root (sudo).\n\n## Installing modules with the unsafe-perm flag\nAnd after a while I found the solution: using the unsafe-perm flag.\n```sudo npm install -g pm2@latest --unsafe-perm```\n\nWhat the docs say about this flag:\n\n>If npm was invoked with root privileges, then it will change the uid to the user account or uid specified by the user config, which defaults to nobody.\n>Set the unsafe-perm flag to run scripts with root privileges.\n\n*And it worked for me like a charm!*\n\nHonestly, I have to admit, that it is not 100% clear to me, why it made any difference in this case.\nI suspect that it was because of gyp. Does anybody maybe have a better explanation?","_id":"Y25uy68kZnQOBaXj"}
{"slug":"demistifying-angularjs-dependency-injection","title":"Demystifying AngularJS' dependency injection","description":"Dependency injection in JavaScript - the AngularJS way","published":true,"date":"2014-02-02 22:10","tags":["javascript","angularjs","dependency injection"],"abstract":"Many people think that it is some kind of magic, how AngularJS resolves dependencies given as function arguments. But it isn't any magic. I'll show you, how they achieve it. This technique can be used everywhere, not just with AngularJS.","md":"Many people think that it is some kind of magic, how AngularJS resolves dependencies given as function arguments. But it isn't any magic. I'll show you, how they achieve it. This technique can be used everywhere, not just with AngularJS.\n\nIf you don't know what does dependency injection look like with AngularJS, here is an example:\n```html\n<div ng-controller=\"GreetCtrl\">\n    Hello {{name}}!\n</div>\n<script>\nfunction GreetCtrl($scope, $rootScope) {\n    $scope.name = 'World';\n    $rootScope.department = 'Angular';\n}\n</script>\n```\n\nWe just have to put `$scope` and `$rootScope` into the function arguments, and when Angular calls the controller (`GreetCtrl`)\nit knows with parameters it has to call the function.\n\n## How do they do it?\n\nIt's fairly easy in JavaScript to get the source code of the every function. We just have to call the `.toString()` method of the function objects.\n```JavaScript\nfunction sum(x, y) {\n    alert(x + y);\n}\n\nconsole.log(sum.toString()); // prints the complete code of the function\n```\n\nHere we go. We just have to find a way to extract the argument list of our function.\n\n```JavaScript\n// The following simplified code is partly taken from the AngularJS source code:\n// https://github.com/angular/angular.js/blob/master/src/auto/injector.js#L63\n\nfunction inject(fn, variablesToInject) {\n    var FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n    var FN_ARG_SPLIT = /,/;\n    var FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\n    var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n    if (typeof fn === 'function' && fn.length) {\n        var fnText = fn.toString(); // getting the source code of the function\n        fnText = fnText.replace(STRIP_COMMENTS, ''); // stripping comments like function(/*string*/ a) {}\n\n        var matches = fnText.match(FN_ARGS); // finding arguments\n        var argNames = matches[1].split(FN_ARG_SPLIT); // finding each argument name\n\n        var newArgs = [];\n        for (var i = 0, l = argNames.length; i < l; i++) {\n            var argName = argNames[i].trim();\n\n            if (!variablesToInject.hasOwnProperty(argName)) {\n                // the argument cannot be injected\n                throw new Error(\"Unknown argument: '\" + argName + \"'. This cannot be injected.\");\n            }\n\n            newArgs.push(variablesToInject[argName]);\n        }\n\n        fn.apply(window, newArgs);\n    }\n}\n\nfunction sum(x, y) {\n    console.log(x + y);\n}\n\ninject(sum, {\n    x: 5,\n    y: 6\n}); // should print 11\n\ninject(sum, {\n    x: 13,\n    y: 45\n}); // should print 58\n\ninject(sum, {\n    x: 33,\n    z: 1 // we are missing 'y'\n}); // should throw an error: Unknown argument: 'y'. This cannot be injected.\n```\n\nSo it's really not a big deal, is it?","_id":"YjrpiCLJI9k9GbNG"}
{"slug":"automatically-adapting-the-height-textarea","title":"Automatically adjusting the height of a textarea to its content text","description":"A simple JavaScript trick to make textareas grow or shrink in height automatically according to their actual text content.","published":true,"date":"2014-10-16 01:00","tags":["trick","javascript"],"abstract":"While I was working on a simple web based markdown editor I needed something where the users can type their texts. My first thought was to use a DIV with the contenteditable attribute. But it introduced many problems, which I did not want to fight. I only needed something simple and stupid - the good old TEXTAREA.","md":"While I was working on a simple web based markdown editor I needed something where the users can type their texts. My first thought was to use a DIV with the contenteditable attribute. But it introduced many problems, which I did not want to fight. I only needed something simple and stupid - the good old TEXTAREA.\n\nBut also textareas have a big problem: they have a fixed height per default.\nYou can either set the `rows` attribute to tell how many rows should be displayed, or you can set their `style.height` properties.\nBut unfortunately there is no auto-height property.\n\n## The idea\nAfter every change in the text we have to measure how high the content is. Fortunately there is a method to do it.\n`element.scrollHeight` gives us the height of the content, regardless of visible scrollbars.\nTo be able to decrease the size we set the height each time back to zero so that scrollHeight reports the required minimum and not more.\nE.g. when the user deletes a line.\n\nWe also have to calculate the size of the border and outline, so that we don't give any chance for the content to be cut off, or that a scrollbar is shown.\n\nThen we set the `style.height` property to the calculated height.\n\nTo do this every time, we use the `oninput` event, which is fired every time the text content changes.\nContrary to `onchange` which only fires when the users clicks away.\n\n\n## Show me the code\n```html\n<textarea data-adaptheight rows=\"3\" cols=\"40\" placeholder=\"Your input\" style=\"padding: 16px; line-height: 1.5;\"></textarea>\n<script>\n(function() {\n    function adjustHeight(textareaElement, minHeight) {\n        // compute the height difference which is caused by border and outline\n        var outerHeight = parseInt(window.getComputedStyle(el).height, 10);\n        var diff = outerHeight - el.clientHeight;\n\n        // set the height to 0 in case of it has to be shrinked\n        el.style.height = 0;\n\n        // set the correct height\n        // el.scrollHeight is the full height of the content, not just the visible part\n        el.style.height = Math.max(minHeight, el.scrollHeight + diff) + 'px';\n    }\n\n    \n    // we use the \"data-adaptheight\" attribute as a marker\n    var textAreas = [].slice.call(document.querySelectorAll('textarea[data-adaptheight]'));\n    \n    // iterate through all the textareas on the page\n    textAreas.forEach(function(el) {\n\n        // we need box-sizing: border-box, if the textarea has padding\n        el.style.boxSizing = el.style.mozBoxSizing = 'border-box';\n\n        // we don't need any scrollbars, do we? :)\n        el.style.overflowY = 'hidden';\n\n        // the minimum height initiated through the \"rows\" attribute\n        var minHeight = el.scrollHeight;\n\n        el.addEventListener('input', function() {\n            adjustHeight(el, minHeight);\n        });\n\n        // we have to readjust when window size changes (e.g. orientation change)\n        window.addEventListener('resize', function() {\n            adjustHeight(el, minHeight);\n        });\n\n        // we adjust height to the initial content\n        adjustHeight(el, minHeight);\n\n    });\n}());\n</script>\n```\n\n## Demo\nJust type in some text and see it for yourself. Initial height is 3 rows.\n\n<textarea data-adaptheight rows=\"3\" cols=\"40\" placeholder=\"Your input\" style=\"padding: 16px; line-height: 1.5; width: 100%; display: block;\"></textarea>\n<script>\n(function() {\n    function adjustHeight(textareaElement, minHeight) {\n        var diff = parseInt(window.getComputedStyle(el).height, 10) - el.clientHeight;\n        el.style.height = 0;\n        el.style.height = Math.max(minHeight, el.scrollHeight + diff) + 'px';\n    }\n\n    var textAreas = document.querySelectorAll('textarea[data-adaptheight]');\n    \n    for (var i = 0, l = textAreas.length; i < l; i++) {\n        var el = textAreas[i];\n        el.style.boxSizing = el.style.mozBoxSizing = 'border-box';\n        el.style.overflowY = 'hidden';\n        var minHeight = el.scrollHeight;\n\n        el.addEventListener('input', function() { adjustHeight(el, minHeight); });\n        window.addEventListener('resize', function() { adjustHeight(el, minHeight); });\n\n        adjustHeight(el, minHeight);\n    }\n}());\n</script>\n\n## Tradeoffs\nEvery keypress causes repaints. Because we set the height of the textarea to 0 and then to the calculated value.\nThis should however be negligible, because most users can only type at most a few characters a second.\nTherefore it shouldn't cause any noticeable performance drawbacks.\n\n## Where to use it for?\nThere are many cases in which this can be useful. Amongst others:\n- Text editors\n- Code editors\n- Comment boxes\n\n**Do you like it? Do you already use it? Just leave a comment below - the comment box is auto adjusted by default. :)**","_id":"YqBhRZw2aljpGgCz"}
{"slug":"how-to-register-a-bower-package","title":"How to register a bower package","description":"A few weeks ago I registered my first package with bower. Here is what I did.","published":true,"date":{"$$date":1391385600000},"tags":["bower","javascript"],"abstract":"A few weeks ago I posted about my [PubSub module](http://bdadam.com/blog/a-simple-pubsub-module-in-javascript.html). Since then I registered it as a bower package. It was actually my first bower package. I am going to show you how easy it was.","md":"A few weeks ago I posted about my [PubSub module](http://bdadam.com/blog/a-simple-pubsub-module-in-javascript.html). Since then I registered it as a bower package. It was actually my first bower package. I am going to show you how easy it was.\n\nInstalling bower is as simple as typing `npm install -g bower`.\nIf you don't know bower, here is what the <a href=\"https://github.com/bower/bower\" rel=\"external,nofollow\">docs say</a> about it:\n>Bower is a package manager for the web. It offers a generic, unopinionated solution to the problem of front-end package management, while exposing the package dependency model via an API that can be consumed by a more opinionated build stack. There are no system wide dependencies, no dependencies are shared between different apps, and the dependency tree is flat.\n\n###Requirements for a bower package:\n* The package sources should be hosted in a git repository\n* Each package has to have a JSON manifest\n* Using <a href=\"http://semver.org/\" rel=\"external,nofollow\">semver</a> git tags\n\n##Registration steps\n1. Generate a JSON manifest with `bower init`. During the process we have to answer some questions.\n1. Check the generated `bower.json` file and fill in the missing parts if needed (e.g. dependecies, keywords, author, etc.)\n1. Commit the json file and set a semver tag with `git tag -a v1.0.0 -m 'my version 1.0.0'`\n1. Register your package with calling `bower register packageName git://packageRepository-url`\n1. When everything goes fine, the package should be registered now\n\nAt the end of the process everybody should be able to install your package with `bower install packageName`.\nFor a more detailed example you can take a look at my <a href=\"https://github.com/bdadam/PubSub\" rel=\"external,nofollow\">PubSub package</a>.","_id":"YwQLMUdiJvByF8Tw"}
{"slug":"switching-background-color-with-gimp","title":"Switching background color of an image with Gimp","description":"Design task - changing the background color of a pattern with Gimp","published":true,"date":"2014-03-02 22:00","tags":["design","gimp","color","tutorial"],"abstract":"As a web developers we sometimes come across some tasks which are not that strictly related to development, but rather to design. For me such a task was a few days ago, when I found a neat background pattern, but the color just didn't fit the site I was working on.","md":"As a web developers we sometimes come across some tasks which are not that strictly related to development, but rather to design. For me such a task was a few days ago, when I found a neat background pattern, but the color just didn't fit the site I was working on.\n\nFor this mini tutorial I'm using this <a href=\"http://subtlepatterns.com/food/\" rel=\"external,nofollow\">pattern from subtlepatterns.com</a>\n<div class=\"text-center\">\n    <img src=\"/static/article-assets/gimp-background-change/food.png\" alt=\"Original background pattern\"/>\n    &nbsp;\n    <img src=\"/static/article-assets/gimp-background-change/food_blue.png\" alt=\"Modified pattern with different background color\"/>\n    <p>Before on the left, after on the right</p>\n</div>\n\n## Here is what to do:\n1. Open the picture in Gimp\n1. Get the hex code of the color, which you want to switch (in this case fac564)\n1. Then go to Colors > Color to Alpha... (If it's grayed out, just switch the Image > Mode from Indexed to **RGB**)\n1. After this you should see the same image, just with transparent background color. So now we create a new background layer with the desired color.\n1. At the end just export the new image and have fun\n\n\n## The steps as images\n<img src=\"/static/article-assets/gimp-background-change/gimp-capture-color-code.jpg\" alt=\"Capturing color code\" title=\"Capturing color code\"/>\n\n<img src=\"/static/article-assets/gimp-background-change/gimp-color-to-alpha-grayed-out.jpg\" alt=\"Color to Alpha grayed out\" title=\"Color to Alpha grayed out\"/>\n\n<img src=\"/static/article-assets/gimp-background-change/gimp-change-mode-to-rgb.jpg\" alt=\"Image mode to RGB\" title=\"Image mode to RGB\"/>\n\n<img src=\"/static/article-assets/gimp-background-change/gimp-color-to-alpha.jpg\" alt=\"Color to Alpha\" title=\"Color to Alpha\"/>\n\n<img src=\"/static/article-assets/gimp-background-change/gimp-color-to-alpha-window.jpg\" alt=\"Color to Alpha window\" title=\"Color to Alpha window\"/>\n\n<img src=\"/static/article-assets/gimp-background-change/gimp-new-background-layer.jpg\" alt=\"Final step - creating new background layer with desired color\" title=\"Final step - creating new background layer with desired color\"/>","_id":"Z9yNM8GZnFFVHydR"}
{"slug":"tracking-clicks-with-google-analytics","title":"Tracking clicks with Google Analytics","description":"Clicktracking and monitoring user behaviour is very important in nowadays websites. They are also essential for A/B testing.","published":true,"date":"2014-02-14 23:00","tags":["javascript","tracking","google analytics"],"abstract":"Every website has some links or buttons, users are clicking on them. But do webmasters know which ones do users click most often? Are there maybe some, which are not clicked at all? Maybe you just built a shiny new navigation and you may ask \"do users use it?\". Clicktracking gives you the answer. When using Google Analytics the results are just shown on your dashboard.","md":"Every website has some links or buttons, users are clicking on them. But do webmasters know which ones do users click most often? Are there maybe some, which are not clicked at all? Maybe you just built a shiny new navigation and you may ask \"do users use it?\". Clicktracking gives you the answer. When using Google Analytics the results are just shown on your dashboard.\n\n## Why would you track clicks on a website?\nI think the answer to this question is very easy: to know, what users are clicking and where they are clicking.\nYou maybe have questions like these:\n* Are users using the breadcrumbs?\n* Are users clicking on 'back to' links?\n* Do they click on the images in the gallery?\n* What works better, a button or a link?\n* Are red buttons working better than green buttons on a specific page?\n* etc.\n\n## Let's find the answers\n```html\n<button id=\"playVideo\">Play video</button>\n<script>\n    $('#playVideo').click(function() {\n        video.play(); // doing some work\n\n        _gaq.push(['_trackEvent', 'Videos', 'Play', video.title]); // the 'old' way, when using the old tracking code\n        /* or */\n        ga('send', 'event', 'Videos', 'Play', video.title); // when using Universal Analytics\n    });\n</script>\n```\nThis way you track events in Google Analytics which show up under Behaviour > Events on your Dashboard.\nIn the example above we are always generating an event when somebody clicks on the play button.\nWith these events we also store what really happened: category=Videos, action=Play, label='title of video'.\n\n## Which link was clicked?\nWe just have to set the arguments properly, and then we exactly know which link was clicked.\n```html\n<a href=\"/my-cool-page.html\" class=\"greenButton\">Go to my cool page</a>\n...\n<a href=\"/my-cool-page.html\" class=\"redButton\">Go to my cool page</a>\n...\n<a href=\"/my-cool-page.html\" class=\"blueButton\">Go to my cool page</a>\n\n<script>\n$('.greenButton, .redButton, .blueButton').click(function() {\n    var className = this.className;\n\n    _gaq.push(['_trackEvent', 'Click', 'Link', className]); // the 'old' way, when using the old tracking code\n    /* or */\n    ga('send', 'event', 'Click', 'Link', className); // when using Universal Analytics\n});\n</script>\n```\n\nThis method is also perfectly suitable for A/B testing. We just have to take care of displaying each variant equally for the visitors of our site.\n\n## What the docs don't say\nThe modern browsers are quite fast. When users click on links, it happens quite often, that Google Analytics has not finished tracking the event.\nBut the browser navigates away from the page, and at the end the event doesn't get registered at all.\n\n*What to do?*\n\nWith listening to `mousedown` event, we can reduce the number of lost events:\n```JavaScript\n$('.myButton').mousedown(function() {\n    // track click\n});\n```\n\nOr using a little hack, we can track even more events. But this one has a tradeoff:\nthe user has to wait more till the new page is loaded. In some situations it is maybe acceptable, but try to avoid this because\nslower loading pages usually mean worse user experience. Which means less pageviews, more frustrated users and *less conversion*.\n\nHere is the hack:\n```JavaScript\n$('.myLink').click(function() {\n    var href = this.href; // getting the URL of the next page\n\n    setTimeout(function() {\n        window.location.href = href; // after a timeout of 250ms we navigate to the URL, where the user wanted to go\n    }, 250);\n\n    return false; // preventing default behaviour, so that the browser doesn't navigate away\n});\n```\n\nReferences:\n* <a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/events\" rel=\"external,nofollow\">Event tracking with Universal Analytics</a>\n* <a href=\"https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide\" rel=\"external,nofollow\">Event tracking with ga.js</a>","_id":"ZOfptwCWCaDN2mhu"}
{"slug":"fat-arrows-for-javascript","title":"Fat arrows for JavaScript","description":"LINQ and C# like lambda expressions are almost there in JavaScript.","published":true,"date":{"$$date":1390953600000},"abstract":"I have to admit, I have completely overseen, that fat arrows ( => ) are coming to JavaScript. The syntax is much the same as in C#. This also means that LINQ is also on its way to the JavaScript world.","md":"I have to admit, I have completely overseen, that fat arrows ( => ) are coming to JavaScript. The syntax is much the same as in C#. This also means that LINQ is also on its way to the JavaScript world.\n\nI have to say one thing I really like, when I'm working with C#, is LINQ and the lambda expressions. If you don't know what they are, here is an example:\n```C#\nvar areThereAnySportsCars = cars.Where(x => x.HorsePower > 300 && x.Seats == 2).Any(y => y.Color == 'RED');\n```\n\nI think it's very easy to see what this expression does: it filters the `cars` array for cars which have more than 300 HP and exactly 2 seats,\nthen checks whether there are any red ones.\n\n## How does it look like in JavaScript?\n```JavaScript\nvar sportsCars = cars.where(x => x.horsePower > 300 && x.seats === 2).any(y => y.Color === 'RED');\n```\n\nDo you notice any differences (besides triple = signs and casing)? No there isn't.\n\n## Where is the catch?\nUnfortunately there is a catch:\nCurrently this syntax is only supported in Firefox.\nAlthought Firefox has been supporting it for more than a year now (almost two), its support is completely missing in Chrome.\nBut the syntax is in the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax\" rel=\"external,nofollow\">ES6 Draft</a>,\nso we can hope that Google also decides to support it.\n\n## More examples\n```JavaScript\nvar sqaure = function(x) { return x * x; };\nvar squareNew = x => x * x;\n\nvar sum = function(a, b) {return a + b};\nvar sumNew = (a, b) => a + b;\n\ndomElement.addEventListener('click', function(event) { handleEvent(event.target); });\ndomElement.addEventListener('click', event => handleEvent(event.target));\n\n[1,2,3].map(function(x) { return x + 1; });\n[1,2,3].map(x => x + 1);\n```\n\n## What's `this`?\nOne of the most complicated things when teaching people JavaScript is to teach what is the value of `this`.\nWith fat arrows we get a function expression which has some limitations:\n1. `this` is bound to the context, where you use the fat arrow\n2. they cannot be used as a constructor (they throw an error)\n\nSome examples:\n```JavaScript\n// With conventional function definitions\nvar obj = {\n    logThis: function() {\n        console.log(this); //this is obj\n        var log = function() {\n            console.log(this); //this is the global object (window)\n        };\n\n        log();\n    }\n};\n\nmyObj.logThis();\n/*\nThis call logs:\nObject { logThis=function() }\nWindow\n*/\n\n// With fat arrows\nvar obj = {\n    logThis: function() {\n        console.log(this); //this is obj\n        var log = () => console.log(this); //this is also obj\n\n        log();\n    }\n};\n\nobj.logThis();\n/*\nThis call logs:\nObject { logThis=function() }\nObject { logThis=function() }\n*/\n\nvar X = a => a*3;\n\nnew X(); // TypeError: X is not a constructor\n```\n\n## OK - but where is LINQ?\nThere have always been many LINQ-like implementations in JavaScript. They usually simply take a function expression as a parameter,\nso it's not a big deal to use fat arrows instead of conventional function expressions.\n```JavaScript\nvar isThereAnySportsCar = cars.where(function(car) { return car.horsePower > 300; }).any(function(c) { return c.seats === 2; });\n\nvar isThereAnySportsCar = cars.where(car => car.horsePower > 300).any(c => c.seats === 2);\n```\n\nBut LINQ is not just about the syntax. In LINQ every item of the original array goes through the whole pipeline, so that the original array is only iterated once.\nIn plain old JavaScript (ECMAScript 3) this was impossible. In ES6 generators are coming, which are solving this issue.\nI'm not going to go into details now, lets have it for another blog post.\n\nThere is <a rel=\"external,nofollow\" href=\"https://github.com/aaronpowell/linq-in-javascript/\">one LINQ implementation</a> which I really like.\nIt's far awy from feature completeness, but it shows how it should be done.","_id":"asnww34CtZkMJJqc"}
{"slug":"adding-tab-support-to-textareas","title":"Adding tab support to textareas","description":"Some example JavaScript code which detects when user presses TAB or SHIFT+TAB","published":true,"date":"2014-01-30 23:56","tags":["javascript","browser"],"abstract":"Have you ever wondered how is it possible to support tabs in a textarea? Normally when you press the tab key, the focus jumps to the next element. But with some JavaScript 'magic' it's possible to indent or unindent the text.","md":"Have you ever wondered how is it possible to support tabs in a textarea? Normally when you press the tab key, the focus jumps to the next element. But with some JavaScript 'magic' it's possible to indent or unindent the text.\n\nThe code detects when the user presses TAB or SHIFT+TAB - the current line gets indented or unindented.\nSource code for the example can be found here: <a href=\"https://gist.github.com/bdadam/8721698\" rel=\"external,nofollow\">gist.github.com/bdadam/8721698</a>.\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta name=\"charset\" content=\"utf-8\"/>\n    <title></title>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>\n    <meta name=\"author\" content=\"Adam Beres-Deak\"/>\n    <meta name=\"viewport\" content=\"width=device-width\"/>\n    <style>\n    \tbody {\n    \t\tpadding: 40px;\n    \t}\n    \ttextarea {\n    \t\twidth: 100%;\n    \t\theight: 350px;\n    \t\tfont-family: CourierNew, Courier;\n    \t}\n    </style>\n</head>\n<body>\n\t<textarea id=\"tx\"></textarea>\n\t<script>\n\tfunction enableTab(id) {\n\t\tvar shiftPressed = false;\n\t\tvar ctrlPressed = false;\n\t\tvar tabChar = '    ';\n\n\t\tfunction checkSpecialKeys(e) {\n\t\t\tswitch(e.keyCode) {\n\t\t\t\tcase 16:\n\t\t\t\t\tshiftPressed = !shiftPressed;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 17:\n\t\t\t\t\tctrlPressed = !ctrlPressed;\n\t\t\t}\n\t\t}\n\n\t\tdocument.addEventListener('keydown', checkSpecialKeys);\n\t\tdocument.addEventListener('keyup', checkSpecialKeys);\n\n\t\tfunction addTab(textarea) {\n\t\t\t// caching some values, because they are changing as text changes\n            var value = textarea.value,\n                start = textarea.selectionStart,\n                end = textarea.selectionEnd;\n\n            // adding tab character to actual cursor position\n            textarea.value = value.substring(0, start) + tabChar + value.substring(end);\n\n            // putting cursor back to its original position\n            textarea.selectionStart = textarea.selectionEnd = start + tabChar.length;\n\t\t}\n\n\t\tfunction removeTab(textarea) {\n\t\t\tvar curPos = textarea.selectionStart,\n\t\t\t\tlines = textarea.value.split('\\n'),\n\t\t\t\tnewValue = '',\n\t\t\t\tdone = false,\n\t\t\t\tcnt = 0;\n\n\t\t\tfor (var i = 0, l = lines.length; i < l; i++) {\n\t\t\t\t// iterating through each line\n\t\t\t\tvar line = lines[i];\n\t\t\t\tcnt += line.length;\n\t\t\t\tif (cnt >= curPos && !done) {\n\t\t\t\t\t// cursor is in this line\n\t\t\t\t\tvar newLine = line.replace(new RegExp('^' + tabChar, ''), '');\n\n\t\t\t\t\tif (newLine !== line) {\n\t\t\t\t\t\t// there was a tab at the beginning of the line, replace was succesfull, cursor must be moved backwards some\n\t\t\t\t\t\tline = newLine;\n\t\t\t\t\t\tcurPos -=tabChar.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tdone = true; // only one substitution per run\n\t\t\t\t}\n\n\t\t\t\tnewValue += line + '\\n';\n\t\t\t}\n\n\t\t\t// setting new value\n\t\t\ttextarea.value = newValue;\n\n\t\t\t// putting cursor back to its original position\n\t\t\ttextarea.selectionStart = textarea.selectionEnd = curPos;\n\t\t}\n\n\t    var textArea = document.getElementById(id);\n\t    textArea.addEventListener('keydown', function(e) {\n\t        if (e.keyCode === 9) {\n\n\t        \tif (!shiftPressed) {\n\t            \taddTab(this);\n\t            } else {\n\t            \tremoveTab(this);\n\t            }\n\n\t            return false; // preventing losing focus\n\t        }\n\t    });\n\t}\n\n\tenableTab('tx');\n\t</script>\n</body>\n```","_id":"b9Uu1R9q88usnW2b"}
{"slug":"simple-usability-trick-for-google-maps","title":"A simple usability trick for Google Maps","description":"What should happen when the user scrolls over the map (mouse wheel) - zooming the map or scrolling the page?","published":true,"date":"2014-03-10 23:00","tags":["google maps","usability","javascript"],"abstract":"Embedding Google Maps in a website is very easy with its JavaScript API. A simple trick can improve the usability of large maps when users scroll with the mouse wheel over them.","md":"Embedding Google Maps in a website is very easy with its JavaScript API. A simple trick can improve the usability of large maps when users scroll with the mouse wheel over them.\n\n## Usability problem\nIf you embed Google Maps via its JavaScript API, there is usually a usability question:\n*What should happen, when the users scroll over the map with their mouse wheels?*\nThe API defaults say: the user should zoom the map.\n\nBut that's in many cases not what users would expect. Especially when the map is large.\nSometimes they just want to scroll the page without zooming the map or having any interaction with it at all.\n\n## How to solve it\nThere is a possible solution which is very easy and works for many users:\n1. Before they had any interaction with the map, disable zooming with the mouse wheel\n1. After they had an interaction, enable zooming with the mouse wheel\n1. When they click away, or interact with other parts of the page, disable zooming with mouse wheel again\n\n## Demo\n1. Just scroll with the mouse wheel over the map\n1. Click onto the map\n1. Start zooming in and out with the mouse wheel\n1. Click somewhere outside of the map\n1. Scroll with mouse wheel over the map to just scroll the page\n1. Repeat these steps [at most a few times - no endless loop :)]\n\n<div id=\"map\" style=\"width: 100%; height: 350px; position: relative;\"></div>\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>\n<script>\n    function loadScript() {\n        if (window.google && window.google.maps) {\n            window.loadMap();\n            return;\n        }\n\n        var script = document.createElement('script');\n        script.src = 'https://maps.googleapis.com/maps/api/js?v=3.exp&callback=loadMap';\n        document.body.appendChild(script);\n    }\n\n    window.loadMap = function() {\n        if (!window.$ || !window.google || !window.google) {\n            return setTimeout(loadMap, 100);\n        }\n\n        $(function() {\n            var el = $('#map');\n            var map;\n\n            function enableScrollingWithMouseWheel() {\n                map.setOptions({ scrollwheel: true });\n            }\n\n            function disableScrollingWithMouseWheel() {\n                map.setOptions({ scrollwheel: false });\n            }\n\n            function init() {\n                map = new google.maps.Map(el[0], {\n                    zoom: 10,\n                    center: new google.maps.LatLng(47.49840560, 19.04075779),\n                    scrollwheel: false // disableScrollingWithMouseWheel as default\n                });\n\n                google.maps.event.addListener(map, 'mousedown', function(){\n                    enableScrollingWithMouseWheel()\n                });\n            }\n\n            init();\n\n            $('body').on('mousedown', function(event) {\n                var clickedInsideMap = $(event.target).parents('#map').length > 0;\n\n                if(!clickedInsideMap) {\n                    disableScrollingWithMouseWheel();\n                }\n            });\n\n            $(window).scroll(function() {\n                disableScrollingWithMouseWheel();\n            });\n        });\n    };\n\n    loadScript();\n</script>\n\n## Update (16/03/2014)\nI edited the source code to use `mousedown` event instead of `click`.\nThis helps when the user drags the map - dragging counts also as an interaction with the map.\n\n## Source code\n```JavaScript\nvar el = $('#map');\nvar map;\n\nfunction enableScrollingWithMouseWheel() {\n    map.setOptions({ scrollwheel: true });\n}\n\nfunction disableScrollingWithMouseWheel() {\n    map.setOptions({ scrollwheel: false });\n}\n\nfunction init() {\n    map = new google.maps.Map(el[0], {\n        zoom: 10,\n        center: new google.maps.LatLng(47.49840560, 19.04075779),\n        scrollwheel: false // disableScrollingWithMouseWheel as default\n    });\n\n    google.maps.event.addListener(map, 'mousedown', function(){\n        enableScrollingWithMouseWheel()\n    });\n}\n\ngoogle.maps.event.addDomListener(window, 'load', init);\n\n$('body').on('mousedown', function(event) {\n    var clickedInsideMap = $(event.target).parents('#map').length > 0;\n\n    if(!clickedInsideMap) {\n        disableScrollingWithMouseWheel();\n    }\n});\n\n$(window).scroll(function() {\n    disableScrollingWithMouseWheel();\n});\n```","_id":"ekX1DugygKSKeQJv"}
{"slug":"defining-properties-on-prototypes-in-javascript","title":"Defining properties on prototype in JavaScript","description":null,"published":false,"date":{"$$date":1391904000000},"tags":["javascript"],"abstract":"In the last post we were looking at defining JavaScript properties. One (edge)case is when we define a property on the prototype and not on the object itself. Let's take a look at what happens.","md":"In the last post we were looking at defining JavaScript properties. One (edge)case is when we define a property on the prototype and not on the object itself. Let's take a look at what happens.\n\n## Defining properties on object prototypes\n```JavaScript\nvar Car = function(doors) {\n    if (!isNaN(doors)) {\n        this.doors = doors;\n    }\n};\n\nObject.defineProperty(Car.prototype, 'doors', {\n    value: 4,\n    writable: true,\n    configurable: false\n});\n\nvar bmw = new Car();\nvar mercedes = new Car(4);\nvar ferrari = new Car(2);\nvar f1car = new Car(0);\n```","_id":"f4Xzd1WnOcz2lzak"}
{"slug":"why-i-chose-a-statically-generated-website","title":"Why I chose to statically generate my website","description":"Advantages and disadvantages of statically generated websites","published":true,"date":{"$$date":1390694400000},"tags":["blogging","static website","assemble","grunt"],"abstract":"I was long searching for the perfect blog engine for this site. More precisely I was planning to build a blog engine myself. I wanted to keep it simple, so I didn't want to use something overkill like Wordpress or Drupal. And I also like to code. But then I realised I don't really need to do this. Building a blog engine is boring, time consuming and so on. So I had to find a simpler alternative.","md":"I was long searching for the perfect blog engine for this site. More precisely I was planning to build a blog engine myself. I wanted to keep it simple, so I didn't want to use something overkill like Wordpress or Drupal. And I also like to code. But then I realised I don't really need to do this. Building a blog engine is boring, time consuming and so on. So I had to find a simpler alternative.\n\n## What did I need?\nI wanted to have a website where I can show, who I am. I also wanted to write some articles and then publish them.\nI wanted to have some sort of statistics about my users. That's all, not that much.\n\n\n## Lets take a look at what I was planning\nI knew I wanted to have some static pages like 'about me', 'contact' and some dynamic pages like blog posts. So I need a database, right?\nLets get one instance at <a href=\"http://mongolab.com\" rel=\"external,nofollow\">MongoLab</a>.\n\nThen I was sure I need some continuous integration (CI) environment and a LIVE environment. That was fine, since I already have a web server.\nSo I knew I wanted to write and edit my articles. So I need a 'members area', with an editor, with https connection and authentication?\nThen I thought it's too much for this small site. Lets look for something smaller.\n\n## First I found markdown again\nI always knew that markdown is very convenient (at least for a coder). Then I came across <a href=\"http://stackedit.io\" rel=\"external,nofollow\">stackedit.io</a>.\nIt the best markdown editor I have ever seen. Maybe better then a plain text editor.\nSo I was sure I wanted to write my articles in markdown. So I don't need to have an editor myself, Stackedit does the job for me.\n\n## I remembered I saw something\nThis thing was called <a href=\"http://wintersmith.io/\" rel=\"external,nofollow\">Wintersmith</a>. A static website generator for node.js.\nUnfortunately written in CoffeeScript. What a shame. But I started to use it. It was almost working but I didn't like it.\n\nSo I was looking for alternatives. And then I found <a href=\"http://assemble.io\">Assemble</a>.\nIt is also a static website generator, actually a GruntJS task. But I liked it better and for templating it uses handlebars instead of Jade.\n\n## Here I am now\nNow I am using Assemble to generate my site. But I am not absolutely happy with it. I am missing some features, which I'm going to need in a few weeks.\nTherefore I think I will build my own static website generator.\n\n## What are the benefits of statically generating this site?\n1. It's fast. Every page is generated once on my desktop computer and then hosting is cheap and easy. No more surprises when a blog post accidentally hits the top of Hackernews.\n1. Deployment is also very easy. I just have to copy some files over SCP and that's it.\n1. Less things can be hacked. :)\n1. No need for caching. Almost every web-server does this for us out of the box.\n1. In the end less things can go wrong.\n\n## There are also some tradeoffs\nEditing and publishing is definitely more complex than just hitting a button called \"Publish\". I cannot do them conveniently over my smart phone, I need my laptop.\n\n## How does my workflow look like?\n1. I write my article in markdown.\n1. I (re)generate the html files.\n1. Then I push the changes to <a href=\"http://github.com/bdadam/bdadam.com\" rel=\"external,nofollow\">my code repository</a>\n1. At last I copy the files to my webserver and check whether everything is fine. That's all.\n\n## Why is my code repository publicly available on GitHub?\n1. I don't need to hide it in a private repository, since every page in this blog is public.\n1. It is a good example for others who are also using (or planning to use) Assemble and are looking for some examples.\n1. It doesn't cost a thing.\n\nSo I think this is the best for my tiny blog. But I am not affraid of changes. I definitely will change everything.\n\nDo you also like static site generation?","_id":"g2jep5IJy0Lh8wol"}
{"slug":"playing-mario-in-the-browser","title":"Playing Mario in the browser","description":"Remake of the original Super Mario Brothers for the browser with web technologies (HTML5, JavaScript)","published":true,"date":{"$$date":1391558400000},"tags":["game","browser","javascript"],"abstract":"Have you enjoyed playing Mario in the old days? Me too. If you want to play with it again, you just have to follow some simple steps and the game is ready to be played right in your browser. Let's try it.","md":"Have you enjoyed playing Mario in the old days? Me too. If you want to play with it again, you just have to follow some simple steps and the game is ready to be played right in your browser. Let's try it.\n\n<img src=\"/static/article-assets/mario.png\" alt=\"Screenshot from the game\"/>\n<p class=\"legal center\">Screenshot from the game</p>\n\nI found a very interesting project on Github: <a href=\"https://github.com/Diogenesthecynic/FullScreenMario\" rel=\"external,nofollow\">FullScreenMario</a>.\nAs the creator says:\n>An HTML5 remake of the original Super Mario Brothers - expanded for wide screens.\n\nThe official website of the game is not working anymore, since Nintendo complained about copyright infridgement.\n\n## Good news\nWe can still play the game. We just have to download the sources (or clone the repository), start a webserver locally and navigate to the local url.\n1. Download this: <a href=\"https://github.com/Diogenesthecynic/FullScreenMario/archive/master.zip\" rel=\"external,nofollow\">master.zip</a>\n1. Extract the files\n1. `cd path/to/files`\n1. Start a webserver (e. g. `serve` [serve](/blog/serve-a-practical-command-line-webserver.html))\n1. Navigate to the game\n\n**Have fun!**","_id":"tYpoppgnIjapMzY5"}
{"slug":"displaying-icons-with-custom-elements","title":"Displaying icons with custom elements","description":"A cross-browser technique to use SVG icons without icon-fonts","published":true,"date":{"$$date":1444780800000},"tags":["html","web components","custom elements","javascript"],"abstract":"I created a technique for using SVG icons without pain with a simple gulp task. Since HTTP/2 is not widely supported yet, it has always been a pain to use icons on web pages. There are many ways to include icons and all of them have some tradeoffs. This interesting technique shows a way to include SVG-icons in a cross-browser way with using custom elements.","md":"I created a technique for using SVG icons without pain with a simple gulp task. Since HTTP/2 is not widely supported yet, it has always been a pain to use icons on web pages. There are many ways to include icons and all of them have some tradeoffs. This interesting technique shows a way to include SVG-icons in a cross-browser way with using custom elements.\n\n## TLDR\n\nThe code can be found here: [bdadam/custom-icons](https://github.com/bdadam/custom-icons).\n\nThe usage looks like this:\n\n```HTML\n<x-icon type=\"some-icon\"></x-icon>\n...\n<script src=\"icons.js\" async></script>\n```\n\nThe script basically puts an svg element inside the `x-icon` tag. This svg element can then - for example - be styled with CSS.\n\n```HTML\n<style>\n    [type=\"happy\"] path {\n        fill: red;\n    }\n</style>\n...\n<x-icon type=\"happy\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\n        <path fill=\"#444\" d=\"...\"></path>\n    </svg>\n</x-icon>\n```\n\n## The longer version\n\nI have to admit that I always had a pain when I had to include a set of icons on webpages.\n- I didn't want to use icon fonts, because they are sometimes problematic:\n    [accessibility problems](https://github.com/FortAwesome/Font-Awesome/issues/6133), [blurrines](http://mir.aculo.us/2014/10/31/icon-fonts-vs-inline-svg/), etc.\n- I didn't want to use inline SVGs either, because of cacheability and duplication.\n- I didn't want to include a bunch of IMG tags, because of the many extra HTTP-requests.\n\nSo I was searching for a better way when I found out that I could have all the advantages of those techniques above.\nI always thought it would be pretty neat if we had some dedicated HTML element for icons. Like this here:\n\n```HTML\n<x-icon type=\"some-icon\"></x-icon>\n```\n\nThis looks quite semantic and self explaining.\nWe could use any tag name which is a valid name for custom elements - e.g. it must include a dash.\nThere is a type attribute which defines which icon is shown. Easy. Bot how to achieve this?\n\n## JavaScript and WebPack for the rescue\n\nThe technique is behind the scenes quite simple.\nThe input is just some SVG files.\nThe output is a single JavaScript file which includes the content of all the SVG files and some loader code.\n\nFor the source code of a sample implementation please check out this GitHub repository: [bdadam/custom-icons](https://github.com/bdadam/custom-icons)\n\nThe only magic what we need is WebPack with a custom loader: [svgo-loader](https://github.com/rpominov/svgo-loader).\nThis loader automagically loads the content of the `require`d SVG files, minimizes it and provides it as normal string variable in the code.\n\nIt's hard to explain, please check out the sources.\n\n### Supported browsers\n\nThis technique works in all modern browsers.\nThough `document.registerElement` is only supported in recent versions of Chrome, we can already use this API now\nwith a very smart [polyfill from WebReflection](https://github.com/WebReflection/document-register-element).\nThanks to the polyfill we have support back to IE9 and Android 2.2.\n\nBrowsers without native SVG support are unfortunately out for now. Maybe in the future if somebody still needs this, one can create a fallback JavaScript\nfile with PNGs.","_id":"unmXQr6pA1GVYhWW"}
{"slug":"loading-webfonts-with-high-performance","title":"Loading webfonts with high performance on responsive websites","description":"Optimally loading webfonts is not a trivial task. Here is a simple guide, how to do it. No blinking, no blocking.","published":true,"date":"2014-10-08 21:00","tags":["localStorage","webfonts","loading","perfmatters"],"abstract":"Once upon a time every website was only using Arial, Verdana, Garamond or Times New Roman for rendering the text, because these font were the only ones reliably installed on almost any computer. But these times are over. Webfonts are spread all over the internet, but we still don't really know, how to load them efficiently.","md":"Once upon a time every website was only using Arial, Verdana, Garamond or Times New Roman for rendering the text, because these font were the only ones reliably installed on almost any computer. But these times are over. Webfonts are spread all over the internet, but we still don't really know, how to load them efficiently.\n\nHere is my simple guide on what to do, to offer the optimal user experience without having to avoid the expensive accessories (aka webfonts).\n\n## 0. TLDR\nThe essence of the technique:\n1. Only serve fonts in woff format\n1. Other browsers get the old \"websafe\" fonts\n1. Download the font in \"binary\" format and optimize it\n1. Serve the fonts yourself\n1. Serve them as CSS files - base64 encoded data URIs\n1. If the user doesn't have the font, load it asynchronously and store in localStorage\n1. Otherwise load it from localStorage without accessing the server\n1. Have fun because your site renders much faster and your users have a much better usability experience\n\nFor those who are still reading here are my explanations for the points above.\n\n<a id=\"update1\"></a>\n### Update - 2014/10/09\nIf you don't believe in this optimization, I created two demo pages. Just test them and take a look at how resources are loaded, what is blocking, what isn't.\n\n1. <a href=\"/samples/webfonts-conventional.html\" target=\"_blank\">Demo page: Loading from Google Fonts</a>\n1. <a href=\"https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Fbdadam.com%2Fsamples%2Fwebfonts-conventional.html\" rel=\"external\" target=\"_blank\">Page Speed Insights: Loading with Google Fonts (79/100)</a>\n1. <a href=\"/samples/webfonts-optimized.html\" target=\"_blank\">Demo page: Loading Asynchronously and serving from localStorage later on</a>\n1. <a href=\"https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Fbdadam.com%2Fsamples%2Fwebfonts-optimized.html\" rel=\"external\" target=\"_blank\">Page Speed Insights: Async loading/localStorage (100/100)</a>\n\n## 1. Browser support\nAccording to [caniuse](http://caniuse.com/#search=woff), 84% of users' browsers support `woff` format.\nThe only exceptions are the usual old browsers - IE8 and old stock android browsers.\nTherefore it is mostly enough to only provide webfonts for the modern browsers which support the `woff` format.\nThe old ones should only show a fallback font (e.g. Arial).\nThe users will also be thankful for having better performance browsing your website. Just try to find something which fits in your design.\n\n## 2. Don't use external providers like Google Fonts or Typekit\nThey either cause many extra blocking requests or annoying blinking if loading asynchronously.\nWe'll see shortly that there is a much better way of serving webfonts.\n\n## 3. The licence matters\nChoose a webfont which you can serve yourself. Unfortunately not every licence allows this.\nFortunately there are many which do - like the open source ones. Some of them are Open Sans or Source Sans Pro.\nWhen you found your font, download the \"binary\" files (otf or ttf).\n\n## 4. Optimizing, reducing size, generating the CSS\nHead on over to the <a href=\"http://www.fontsquirrel.com/tools/webfont-generator\">Font Squirrel Webfont Generator</a>.\n\nWhen choosing expert mode we can choose to remove some charsets.\nYou have to decide which character sets you really need. Is your content only in english? Then you just need a basic subset.\nIs your content in chineese? Then you most probably need everything.\n\nIt is important to choose the option to generate CSS files which contains the base64 encoded fonts. This file is what we really need.\n\n## 5. Serving the CSS file\nThis file is going to be quite large (up to 100-300 kB) depending on your choice on charsets and the other options.\nTherefore it is important to gzip it correctly and setting strong cacheability when serving it to the users.\n\nFortunately you are going to serve this file only once for your visitors.\nThe first time, when the user doesn't have the font file, their browser downloads it asynchronously and stores it in localStorage.\nThis time users with slower connections can see when the browsers repaints the fallback fonts with your webfonts, but it only happens at most once.\nMany users won't notice anything at all.\n\nFrom the second page load on you just load the CSS file from the localStorage. Which is reasonably fast (5-50ms).\nThe users won't see any blinking, because all the operations are synchronous, but only take a couple of milliseconds.\n\n## 6. Show me the code\nSince we store the file in localStorage this technique only needs client side code. Here you are.\n\n```html\n<head>\n...\n<script>\n(function(){\n    function addFont() {\n        var style = document.createElement('style');\n        style.rel = 'stylesheet';\n        document.head.appendChild(style);\n        style.textContent = localStorage.sourceSansPro;\n    }\n\n    try {\n        if (localStorage.sourceSansPro) {\n            // The font is in localStorage, we can load it directly\n            addFont();\n        } else {\n            // We have to first load the font file asynchronously\n            var request = new XMLHttpRequest();\n            request.open('GET', '/path/to/source-sans-pro.woff.css', true);\n\n            request.onload = function() {\n                if (request.status >= 200 && request.status < 400) {\n                    // We save the file in localStorage\n                    localStorage.sourceSansPro = request.responseText;\n\n                    // ... and load the font\n                    addFont();\n                }\n            }\n\n            request.send();\n        }\n    } catch(ex) {\n        // maybe load the font synchronously for woff-capable browsers\n        // to avoid blinking on every request when localStorage is not available\n    }\n}());\n</script>\n...\n</head>\n```\n\n## 7. What did we achieve\n\n1. Eliminated at least one - but typically many - blocking requests\n1. At most one blinking for the user when the fallback font gets replaced by the webfont (first visit, first request)\n1. Faster render time on the first page request\n1. Better score on Google Page Speed Insights and WebPageTest.org\n\n## 8. See it in action\nThis technique is used on my blog. You can test it with your smartphone, tablet or laptop. It's fast, I promise. :)\n\n**There are still some fine details which are missing from this post.\nIf you have questions or feedback, you are welcome to leave a [comment](#comments).**\n\n<a id=\"update2\"></a>\n### Update - 2014/10/11\nA Twitter user, @Kseso, made me aware of another method, which also proceeds to a 99/100 score on Google Page Speed Insights.\nThe method is to inline the CSS what Google Fonts delivers.\n\nI advise against this method, because it delays text rendering quite a lot. So let's take a deeper look what happens here.\n\n1. We define font faces directly in the HTML file like this:\n```html\n<head>\n...\n<style>\n@font-face {\nfont-family: 'Source Sans Pro';\nfont-style: normal;\nfont-weight: 400;\nsrc: local('Source Sans Pro'),\n     local('SourceSansPro-Regular'),\n     url(http://fonts.gstatic.com/s/sourcesanspro/v9/ODelI1aHBYDBqgeIAH2zlBBHWFfxJXS04xYOz0jw624.woff) format('woff');\n}\n</style>\n...\n</head>\n```\n1. The browser doesn't start to fetch the font file, until it doesn't know whether it is needed at all somewhere in the page.\n1. The browser waits until DOM and CSSOM are constructed\n1. The browser starts to fetch the font file from Google Fonts\n(please notice, there is also an extra DNS request for fonts.gstatic.com).\n<img src=\"/static/article-assets/gfonts-timeline.jpg\" alt=\"Timeline of loading fonts from Google Fonts\">\nThis timeline shows that the browser only starts fetching the font file, just before the DOMContentLoaded event.\n1. If this wasn't bad enough, most browsers will just render blank text, where those font faces are used:\n    1. Only IE starts rendering **immediately** with the fallback font\n    2. Firefox and Chrome35+ wait for the font download to complete **with a 3 seconds timeout** (after which the fallback font is used)\n    3. Safari and Chrome pre 35 wait for the font download to complete **without any timeout**\n\nTherefore on slow connections you will delay rendering of your text content up to 3 seconds in most browsers.\nIn worst case, if your font takes ages to load (e.g. because of bad mobile connection), Safari users will never see your text content and just leave your page.\nYour users can end up seeing a white page until the timeout kicks in.\n\nMore info can be found on <a href=\"https://www.igvita.com/2012/09/12/web-fonts-performance-making-pretty-fast/\" rel=\"external\">Ilya Gregorik's blog</a>.\n\nI also created <a href=\"/samples/webfonts-googlefonts.html\" target=\"_blank\">a test page</a>, where you can check it out yourself.\n\n\n### Resources\n* [Web Fonts Performance: Making Pretty, Fast - By Ilya Grigorik](https://www.igvita.com/2012/09/12/web-fonts-performance-making-pretty-fast/)\n* [Improving Smashing Magazine’s Performance: A Case Study](http://www.smashingmagazine.com/2014/09/08/improving-smashing-magazine-performance-case-study/)\n* [How we make RWD sites load fast as heck](http://www.filamentgroup.com/lab/performance-rwd.html)\n\n#### Translations\nThis article was <a href=\"http://css-live.ru/articles-css/bystraya-zagruzka-veb-shriftov-na-adaptivnyx-sajtax.html\" hreflang=\"ru\" rel=\"external\">translated to Russian by Максим Усачев</a>.","_id":"vf6mjhmDVbfaRXlt"}
{"slug":"how-to-redirect-www-to-naked-domain-and-vice-versa-with-nginx","title":"How to redirect www to naked domain and vice versa with NGINX?","description":"Redirection www to non-www and vice versa with NGINX","published":true,"date":"2014-02-03 23:00","tags":["nginx","redirection"],"abstract":"One thing almost every website needs is redirection. Many websites decide to serve their visitors both over www and non-www site, just in case the user types it into the browser. But for SEO it's bad, when you have the same site over two different domains. Here is, how to solve this issue with NGINX.","md":"One thing almost every website needs is redirection. Many websites decide to serve their visitors both over www and non-www site, just in case the user types it into the browser. But for SEO it's bad, when you have the same site over two different domains. Here is, how to solve this issue with NGINX.\n\n## Redirecting www to non-www with `if` statement\n\n```nginx\nserver {\n    listen 80;\n\n    server_name www.example.com example.com;\n\n    if ($host = 'www.example.com' ) {\n        # redirecting www.example.com to example.com\n        # path, query string are retained\n        rewrite  ^/(.*)$  http://example.com/$1  permanent;\n    }\n}\n```\n\nPlease note that `if` is <a href=\"http://wiki.nginx.org/IfIsEvil\" rel=\"external,nofollow\">considered evil</a> inside NGINX configuration,\nbut it is perfectly OK in this case. The official docs say, that there are two cases when `if` is \"100% safe\":\n* redirect (our case)\n* return\n\n```nginx\nif ($request_method = POST ) {\n    return 405;\n}\nif ($args ~ post=140){\n    rewrite ^ http://example.com/ permanent;\n}\n```\n\n## Redirecting www to non-www without `if` statement\nThe trick in this case is that we have to define two server blocks.\n\n```nginx\nserver {\n    listen       80;\n    server_name  www.example.com;\n\n    # redirecting www.example.com to example.com\n    # path, query string are retained\n    return       301 http://example.com$request_uri;\n}\n\nserver {\n    listen       80;\n    server_name  example.com;\n    ...\n}\n```\n\n## Redirecting non-www to www\n\n```nginx\nserver {\n    listen       80;\n    server_name  example.com;\n\n    # redirecting example.com to www.example.com\n    # path, query string are retained\n    return       301 http://www.example.com$request_uri;\n}\n\nserver {\n    listen       80;\n    server_name  www.example.com;\n    ...\n}\n```","_id":"wpf2DNR2AYpYqkjd"}
{"slug":"static-site-generation-boilerplate","title":"Boilerplate for static site generation","description":"Boilerplate code for generating static websites with node.js, GruntJS and Assembe.","published":true,"date":"2014-03-25 23:30","tags":["static website","boilerplate"],"abstract":"As I already mentioned before, I really like simple things like static webpages. To speed things up, I created a boilerplate, which can be used by anybody to generate static websites.","md":"As I already mentioned before, I really like simple things like static webpages. To speed things up, I created a boilerplate, which can be used by anybody to generate static websites.\n\n[This blog is also statically generated.](/blog/why-i-chose-a-statically-generated-website.html)\nStatically generating websites has many advantages. Some of these are\n1. These sites can be hosted everywhere\n1. No backend to be hacked\n1. Outstanding performance\n1. etc.\n\nThe boilerplate code can be found on GitHub: [bdadam/static-site-boilerplate](https://github.com/bdadam/static-site-boilerplate)\n\n## What can this boilerplate do for you?\n1. It generates html from markdown files with the help of [Assemble](http://assemble.io/).\n1. It generates minified and optimized css file(s) with less and uncss\n1. It generates minified and optimized JavaScript files with RequireJS\n1. During development the affected files are regenerated when something changes (GruntJS watch task)\n1. Local webserver with Livereload to immediately see what changes and what does it look like\n\n## How to use it?\n1. Clone this repository `git clone https://github.com/bdadam/static-site-boilerplate`\n1. Install node dependencies `npm install`\n1. Install bower dependencies `bower install`\n1. Simply run `grunt build` to see that everything works\n1. Run `grunt` for starting \"development mode\"\n1. Then edit some files in the `content` folder and watch the html being regenerated and automatically refreshed in the browser\n\n## What is planned for future releases?\n1. Automatically running JavaScript unit tests with Jasmine\n1. Supporting `browserify` for building JavaScript files\n1. Adding some Handlebars helpers\n1. Maybe some more partials and templates\n1. Some real examples where you can see it in action\n\n\n**I would be glad to hear your feedback in the comments.**","_id":"zXbt6NVbSAo3QtYN"}
{"$$indexCreated":{"fieldName":"slug","unique":true,"sparse":false}}
